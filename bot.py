# /root/mybot/bot.py
import os
import io
import csv
import uuid
import logging

from dotenv import load_dotenv
from httpx import AsyncClient, ConnectError, HTTPError
from telegram import (
    Update, InputFile, InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove,
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters,
)

# --- –ª–æ–∫–∞–ª—å–Ω—ñ –º–æ–¥—É–ª—ñ –≤–∞—à–æ–≥–æ –ø—Ä–æ—î–∫—Ç—É
from dao import init_db, ensure_user, get_balance, charge, get_phone, register_or_update_phone
from dataforseo import DataForSEO

# -------------------- –õ–û–ì–Ü–ù–ì --------------------
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("bot")

# -------------------- ENV -----------------------
load_dotenv()

TELEGRAM_TOKEN      = os.environ["TELEGRAM_BOT_TOKEN"]
DFS_LOGIN           = os.environ["DATAFORSEO_LOGIN"]
DFS_PASS            = os.environ["DATAFORSEO_PASSWORD"]
DFS_BASE            = os.getenv("DATAFORSEO_BASE", "https://api.dataforseo.com")
BACKEND_BASE        = os.getenv("BACKEND_BASE", "http://127.0.0.1:8001").rstrip("/")

PRICE_10            = int(os.getenv("PRICE_10", "5"))
PRICE_ALL           = int(os.getenv("PRICE_ALL", "20"))
INITIAL_BONUS       = int(os.getenv("INITIAL_BONUS", "10"))
CREDIT_PRICE_UAH    = float(os.getenv("CREDIT_PRICE_UAH", "5"))
TOPUP_OPTIONS       = [int(x.strip()) for x in os.getenv("TOPUP_OPTIONS", "100,250,500").split(",") if x.strip().isdigit()]

# -------------------- INIT ----------------------
init_db()
dfs = DataForSEO(DFS_LOGIN, DFS_PASS, DFS_BASE)

# -------------------- HELPERS -------------------
def _extract_items(resp: dict) -> list[dict]:
    tasks = resp.get("tasks") or []
    if not tasks:
        return []
    t = tasks[0] or {}
    if t.get("status_code") and t["status_code"] != 20000:
        raise RuntimeError(t.get("status_message") or f"Task error: {t.get('status_code')}")
    res = t.get("result") or []
    if not res:
        return []
    return res[0].get("items") or []

def _fmt_preview(items: list[dict], cap: int) -> str:
    lines = []
    for it in items[:cap]:
        url_from = (it.get("page_from") or {}).get("url_from") or it.get("url_from")
        anchor = (it.get("anchor") or "").strip()
        first_seen = it.get("first_seen")
        lines.append(f"‚Ä¢ {url_from}\n  anchor: {anchor[:80]} | first_seen: {first_seen}")
    return "\n".join(lines)

def _items_to_csv_bytes(items: list[dict]) -> bytes:
    buf = io.StringIO()
    writer = csv.writer(buf)
    writer.writerow(["url_from", "url_to", "anchor", "dofollow", "first_seen", "last_seen", "domain_from"])
    for it in items:
        writer.writerow([
            (it.get("page_from") or {}).get("url_from") or it.get("url_from"),
            it.get("url_to"),
            (it.get("anchor") or "").replace("\n", " ").strip(),
            it.get("dofollow"),
            it.get("first_seen"),
            it.get("last_visited"),
            it.get("domain_from")
        ])
    return buf.getvalue().encode()

def _topup_keyboard() -> InlineKeyboardMarkup:
    rows = []
    for amount in TOPUP_OPTIONS:
        credits = int(amount // CREDIT_PRICE_UAH)
        rows.append([
            InlineKeyboardButton(
                f"üí≥ –ü–æ–ø–æ–≤–Ω–∏—Ç–∏ {amount}‚Ç¥ (~{credits} –∫—Ä–µ–¥–∏—Ç—ñ–≤)",
                callback_data=f"topup|{amount}"
            )
        ])
    return InlineKeyboardMarkup(rows)

def _main_menu_kb() -> ReplyKeyboardMarkup:
    # ¬´—Ñ—ñ–∑–∏—á–Ω–∞¬ª –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑–Ω–∏–∑—É
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton("/backlinks"), KeyboardButton("/topup")],
            [KeyboardButton("/balance"),   KeyboardButton("/register")],
        ],
        resize_keyboard=True,
        one_time_keyboard=False,
        selective=False,
    )

# -------------------- HANDLERS ------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    ensure_user(uid)
    bal = get_balance(uid)
    phone = get_phone(uid)
    reg_line = "–°—Ç–∞—Ç—É—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: ‚úÖ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–æ–¥–∞–Ω–æ" if phone else "–°—Ç–∞—Ç—É—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: ‚ùå –Ω–µ–º–∞—î —Ç–µ–ª–µ—Ñ–æ–Ω—É (–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /register)"
    text = (
        "–ü—Ä–∏–≤—ñ—Ç! –Ø SEO-–±–æ—Ç –∑ –±–∞–ª–∞–Ω—Å–æ–º.\n"
        "–ö–æ–º–∞–Ω–¥–∏:\n"
        "/register ‚Äî –¥–æ–¥–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (–Ω–æ–≤–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –±–æ–Ω—É—Å)\n"
        "/backlinks <–¥–æ–º–µ–Ω> ‚Äî –≤–∏–±—ñ—Ä 10/–≤—Å—ñ + –ø–µ—Ä–µ–≥–ª—è–¥/CSV (—Å–ø–∏—Å–∞–Ω–Ω—è –∫—Ä–µ–¥–∏—Ç—ñ–≤)\n"
        "/balance ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –±–∞–ª–∞–Ω—Å\n"
        "/topup ‚Äî –ø–æ–ø–æ–≤–Ω–∏—Ç–∏ –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ LiqPay\n\n"
        f"{reg_line}\n–í–∞—à –±–∞–ª–∞–Ω—Å: {bal} –∫—Ä–µ–¥–∏—Ç—ñ–≤"
    )
    # –ü–æ–∫–∞–∑—É—î–º–æ –ª–∏—à–µ ¬´—Ñ—ñ–∑–∏—á–Ω—ñ¬ª –∫–Ω–æ–ø–∫–∏-–º–µ–Ω—é, –±–µ–∑ —ñ–Ω–ª–∞–π–Ω-–ø–∞–∫–µ—Ç—ñ–≤ –Ω–∞ —Å—Ç–∞—Ä—Ç—ñ
    kb = _main_menu_kb()
    if update.message:
        await update.message.reply_text(text, reply_markup=kb)
    else:
        await update.effective_chat.send_message(text, reply_markup=kb)

async def menu_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ú–µ–Ω—é:", reply_markup=_main_menu_kb())

async def buy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ—Å—Ç–æ –¥—É–±–ª—å /start (–∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é)
    await start(update, context)

async def register(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    ensure_user(uid)
    kb = [[KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]]
    await update.message.reply_text(
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É, —â–æ–± –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è –≤–ª–∞—Å–Ω–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É:",
        reply_markup=ReplyKeyboardMarkup(kb, one_time_keyboard=True, resize_keyboard=True)
    )

async def on_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    contact = update.message.contact
    if not contact:
        return
    if contact.user_id and contact.user_id != uid:
        return await update.message.reply_text(
            "–ó–¥–∞—î—Ç—å—Å—è, —Ü–µ –Ω–µ –≤–∞—à –Ω–æ–º–µ—Ä. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–∞–º–µ —Å–≤–æ—ó–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.",
            reply_markup=ReplyKeyboardRemove()
        )
    is_new, credited = register_or_update_phone(uid, contact.phone_number, initial_bonus=INITIAL_BONUS)
    bal = get_balance(uid)
    if is_new and credited > 0:
        txt = f"‚úÖ –î—è–∫—É—î–º–æ –∑–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é! –ù–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ –±–æ–Ω—É—Å: +{credited} –∫—Ä–µ–¥–∏—Ç—ñ–≤.\n–í–∞—à –±–∞–ª–∞–Ω—Å: {bal}"
    else:
        txt = f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –í–∞—à –±–∞–ª–∞–Ω—Å: {bal}"
    await update.message.reply_text(txt, reply_markup=_main_menu_kb())

async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    ensure_user(uid)
    bal = get_balance(uid)
    phone = get_phone(uid)
    reg_line = "‚úÖ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–æ–¥–∞–Ω–æ" if phone else "‚ùå –Ω–µ–º–∞—î —Ç–µ–ª–µ—Ñ–æ–Ω—É (–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /register)"
    await update.message.reply_text(f"–ë–∞–ª–∞–Ω—Å: {bal} –∫—Ä–µ–¥–∏—Ç—ñ–≤\n–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: {reg_line}", reply_markup=_main_menu_kb())

async def topup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    ensure_user(uid)
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Å—É–º—É –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è:", reply_markup=_topup_keyboard())

async def backlinks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = update.message.text.split()[1:]
    if not args:
        return await update.message.reply_text("–ü—Ä–∏–∫–ª–∞–¥: /backlinks yourdomain.com", reply_markup=_main_menu_kb())
    domain = args[0]
    kb = [
        [
            InlineKeyboardButton("üëÄ –ü–æ–∫–∞–∑–∞—Ç–∏ 10 –æ—Å—Ç–∞–Ω–Ω—ñ—Ö", callback_data=f"show|{domain}|10"),
            InlineKeyboardButton("‚¨áÔ∏è CSV (10)",            callback_data=f"csv|{domain}|10"),
        ],
        [
            InlineKeyboardButton("üëÄ –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ",         callback_data=f"show|{domain}|all"),
            InlineKeyboardButton("‚¨áÔ∏è CSV (–≤—Å—ñ)",            callback_data=f"csv|{domain}|all"),
        ],
    ]
    await update.message.reply_text(
        f"–î–æ–º–µ–Ω: {domain}\n–û–±–µ—Ä–∏, —â–æ –∑—Ä–æ–±–∏—Ç–∏:",
        reply_markup=InlineKeyboardMarkup(kb),
    )

async def on_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    uid = update.effective_user.id

    raw = query.data or ""
    parts = raw.split("|")
    if not parts:
        return await query.edit_message_text("–ù–µ–≤—ñ—Ä–Ω–∏–π –∑–∞–ø–∏—Ç.")

    # -------- –ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è —á–µ—Ä–µ–∑ LiqPay --------
    if parts[0] == "topup":
        try:
            amount_uah = int(parts[1])
        except Exception:
            return await query.edit_message_text("–ù–µ–≤—ñ—Ä–Ω–∞ —Å—É–º–∞ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è.")

        payload = {
            "user_id": str(uid),
            "amount": str(amount_uah),
            "description": f"{amount_uah} UAH topup"
        }

        try:
            async with AsyncClient(timeout=20) as c:
                r = await c.post(f"{BACKEND_BASE}/api/payments/create", json=payload)
            if r.status_code != 200:
                log.error("Payments API %s: %s", r.status_code, r.text)
                return await query.edit_message_text("‚ùå –ë–µ–∫–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –∞–±–æ –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ–º–∏–ª–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
            resp = r.json()
            url = resp.get("checkout_url")
            if not url:
                log.error("Payments API no checkout_url: %s", resp)
                return await query.edit_message_text("‚ùå –ù–µ –æ—Ç—Ä–∏–º–∞–≤ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ–ø–ª–∞—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        except ConnectError:
            return await query.edit_message_text(
                "‚ùå –ë–µ–∫–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –ü–µ—Ä–µ–≤—ñ—Ä BACKEND_BASE —ñ —á–∏ –∑–∞–ø—É—â–µ–Ω–∏–π payments_api (–ø–æ—Ä—Ç 8001)."
            )
        except Exception as e:
            log.exception("Create payment failed")
            return await query.edit_message_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏: {e}")

        kb = [[InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏ (LiqPay)", url=url)]]
        return await query.edit_message_text(
            f"–†–∞—Ö—É–Ω–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ –Ω–∞ {amount_uah}‚Ç¥. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å, —â–æ–± –æ–ø–ª–∞—Ç–∏—Ç–∏:",
            reply_markup=InlineKeyboardMarkup(kb)
        )

    # -------- –ü–ª–∞—Ç–Ω—ñ –¥—ñ—ó (DataForSEO) --------
    try:
        action, domain, scope = parts
    except ValueError:
        return await query.edit_message_text("–ù–µ–≤—ñ—Ä–Ω–∏–π –∑–∞–ø–∏—Ç.")

    cost = PRICE_10 if scope == "10" else PRICE_ALL
    if not charge(uid, cost, domain, scope):
        # –Ω–µ –≤–∏—Å—Ç–∞—á–∞—î –∫—Ä–µ–¥–∏—Ç—ñ–≤ ‚Äî –ø–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è
        return await query.edit_message_text(
            f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫—Ä–µ–¥–∏—Ç—ñ–≤ (–ø–æ—Ç—Ä—ñ–±–Ω–æ {cost}). –ü–æ–ø–æ–≤–Ω—ñ—Ç—å –±–∞–ª–∞–Ω—Å.",
            reply_markup=_topup_keyboard()
        )

    limit = 10 if scope == "10" else 1000
    try:
        data = await dfs.backlinks_live(domain, limit=limit, order_by="first_seen,desc")
        items = _extract_items(data)
        if not items:
            return await query.edit_message_text("–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π—à–æ–≤ üòï")

        if action == "show":
            cap = 10 if scope == "10" else 50
            txt = _fmt_preview(items, cap)
            if scope == "all" and len(items) > cap:
                txt += f"\n\n‚Ä¶–ø–æ–∫–∞–∑–∞–Ω–æ –ø–µ—Ä—à—ñ {cap} –∑ {len(items)}. –û–±–µ—Ä–∏ CSV (–≤—Å—ñ), —â–æ–± –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–æ–≤–Ω–∏–π —Å–ø–∏—Å–æ–∫."
            await query.edit_message_text(txt)
        elif action == "csv":
            csv_bytes = _items_to_csv_bytes(items)
            await query.message.reply_document(
                document=InputFile(io.BytesIO(csv_bytes), filename=f"{domain}_backlinks_{scope}.csv"),
                caption=f"–ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è {domain} ({'10' if scope=='10' else 'all'})"
            )
        else:
            await query.edit_message_text("–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è.")
    except HTTPError as e:
        log.exception("HTTP error")
        await query.edit_message_text(f"DataForSEO HTTP error: {e}")
    except Exception as e:
        log.exception("Unexpected error")
        await query.edit_message_text(f"–ü–æ–º–∏–ª–∫–∞: {e}")

# -------------------- MAIN ----------------------
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", menu_cmd))      # –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ ¬´—Ñ—ñ–∑–∏—á–Ω—ñ¬ª –∫–Ω–æ–ø–∫–∏
    app.add_handler(CommandHandler("buy", buy))            # –¥—É–±–ª—å –º–µ–Ω—é
    app.add_handler(CommandHandler("register", register))
    app.add_handler(MessageHandler(filters.CONTACT, on_contact))
    app.add_handler(CommandHandler("balance", balance))
    app.add_handler(CommandHandler("topup", topup))
    app.add_handler(CommandHandler("backlinks", backlinks))
    app.add_handler(CallbackQueryHandler(on_choice))       # –ª–æ–≤–∏–º–æ –≤—Å—ñ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è

    log.info("Bot started. DFS_BASE=%s BACKEND_BASE=%s", DFS_BASE, BACKEND_BASE)
    app.run_polling(close_loop=False)

if __name__ == "__main__":
    main()
