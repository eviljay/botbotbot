# bot.py
import os
import io
import csv
import uuid
import math
import logging
from typing import List

from dotenv import load_dotenv
from httpx import AsyncClient, ConnectError, HTTPError

from telegram import (
    Update,
    InputFile,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    KeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

# –õ–æ–∫–∞–ª—å–Ω—ñ –º–æ–¥—É–ª—ñ
from dao import init_db, ensure_user, get_balance, charge, get_phone, register_or_update_phone
from dataforseo import DataForSEO

# -----------------------------------------------------------------------------
# –õ–û–ì–ò
# -----------------------------------------------------------------------------
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("bot")

# -----------------------------------------------------------------------------
# ENV
# -----------------------------------------------------------------------------
load_dotenv()

TELEGRAM_TOKEN = os.environ["TELEGRAM_BOT_TOKEN"]
DFS_LOGIN = os.environ["DATAFORSEO_LOGIN"]
DFS_PASS = os.environ["DATAFORSEO_PASSWORD"]
DFS_BASE = os.getenv("DATAFORSEO_BASE", "https://api.dataforseo.com")

# –ü—É–±–ª—ñ—á–Ω–∏–π –±–µ–∫–µ–Ω–¥ (–Ω–∞—à FastAPI –∑ /api/payments/*)
BACKEND_BASE = os.getenv("BACKEND_BASE", "http://127.0.0.1:8000").rstrip("/")

# –°–∫—ñ–ª—å–∫–∏ –∫–æ—à—Ç—É—î 1 –∫—Ä–µ–¥–∏—Ç (–≤ –≥—Ä–Ω)
CREDIT_PRICE_UAH = float(os.getenv("CREDIT_PRICE_UAH", "5"))
# –°–ø–∏—Å–∞–Ω–Ω—è –∑–∞ –∑–∞–ø–∏—Ç –±–µ–∫–ª—ñ–Ω–∫—ñ–≤ —É –≥—Ä–∏–≤–Ω—è—Ö (–ø–æ—Ç—ñ–º –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —É –∫—Ä–µ–¥–∏—Ç–∏)
BACKLINKS_CHARGE_UAH = float(os.getenv("BACKLINKS_CHARGE_UAH", "5"))

# –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –±–æ–Ω—É—Å –∑–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é (–∫—Ä–µ–¥–∏—Ç—ñ–≤)
INITIAL_BONUS = int(os.getenv("INITIAL_BONUS", "10"))

# –í–∞—Ä—ñ–∞–Ω—Ç–∏ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è (–≤ –≥—Ä–Ω)
TOPUP_OPTIONS = [
    int(x.strip())
    for x in os.getenv("TOPUP_OPTIONS", "100,250,500").split(",")
    if x.strip().isdigit()
]

# –°–∫—ñ–ª—å–∫–∏ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å—ñ–≤ –ø—Ä–∏ "–ø–æ–∫–∞–∑–∞—Ç–∏ 10"
PREVIEW_COUNT = 10
# –°–∫—ñ–ª—å–∫–∏ –º–∞–∫—Å–∏–º—É–º –≤—ñ–¥–¥–∞–≤–∞—Ç–∏ —É CSV –ø—Ä–∏ "–≤—Å—ñ"
CSV_MAX = 1000

# -----------------------------------------------------------------------------
# –Ü–ù–Ü–¢
# -----------------------------------------------------------------------------
init_db()
dfs = DataForSEO(DFS_LOGIN, DFS_PASS, DFS_BASE)

# -----------------------------------------------------------------------------
# –£–¢–ò–õ–Ü–¢–ò
# -----------------------------------------------------------------------------
def main_menu_keyboard() -> ReplyKeyboardMarkup:
    rows = [
        [KeyboardButton("üîó Backlinks"), KeyboardButton("üí≥ –ü–æ–ø–æ–≤–Ω–∏—Ç–∏")],
        [KeyboardButton("üìä –ë–∞–ª–∞–Ω—Å"), KeyboardButton("üì± –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è")],
    ]
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

def _extract_items(resp: dict) -> List[dict]:
    tasks = resp.get("tasks") or []
    if not tasks:
        return []
    t = tasks[0] or {}
    if t.get("status_code") and t["status_code"] != 20000:
        raise RuntimeError(t.get("status_message") or f"Task error: {t.get('status_code')}")
    res = t.get("result") or []
    if not res:
        return []
    return res[0].get("items") or []

def _fmt_preview(items: List[dict], cap: int) -> str:
    lines = []
    for it in items[:cap]:
        url_from = (it.get("page_from") or {}).get("url_from") or it.get("url_from")
        anchor = (it.get("anchor") or "").strip()
        first_seen = it.get("first_seen")
        lines.append(f"‚Ä¢ {url_from}\n  anchor: {anchor[:80]} | first_seen: {first_seen}")
    return "\n".join(lines)

def _items_to_csv_bytes(items: List[dict]) -> bytes:
    buf = io.StringIO()
    w = csv.writer(buf)
    w.writerow(["url_from", "url_to", "anchor", "dofollow", "first_seen", "last_seen", "domain_from"])
    for it in items:
        w.writerow([
            (it.get("page_from") or {}).get("url_from") or it.get("url_from"),
            it.get("url_to"),
            (it.get("anchor") or "").replace("\n", " ").strip(),
            it.get("dofollow"),
            it.get("first_seen"),
            it.get("last_visited"),
            it.get("domain_from")
        ])
    return buf.getvalue().encode()

def _uah_to_credits(amount_uah: float) -> int:
    # –æ–∫—Ä—É–≥–ª—è—î–º–æ –≤–≥–æ—Ä—É, —â–æ–± –Ω–µ –±—É–ª–æ ‚Äú–ø—ñ–≤–∫—Ä–µ–¥–∏—Ç—É‚Äù
    return max(1, math.ceil(amount_uah / CREDIT_PRICE_UAH))

# -----------------------------------------------------------------------------
# /start
# -----------------------------------------------------------------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    ensure_user(uid)
    bal = get_balance(uid)
    phone = get_phone(uid)
    reg = "‚úÖ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–æ–¥–∞–Ω–æ" if phone else "‚ùå –Ω–µ–º–∞—î —Ç–µ–ª–µ—Ñ–æ–Ω—É (–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è)"

    text = (
        "–ü—Ä–∏–≤—ñ—Ç! –Ø SEO-–±–æ—Ç –∑ –±–∞–ª–∞–Ω—Å–æ–º.\n\n"
        "–ö–æ–º–∞–Ω–¥–∏/–º–µ–Ω—é:\n"
        "üîó Backlinks ‚Äî –æ—Ç—Ä–∏–º–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ –∞–±–æ –≤—Å—ñ –±–µ–∫–ª—ñ–Ω–∫–∏ –π CSV\n"
        "üí≥ –ü–æ–ø–æ–≤–Ω–∏—Ç–∏ ‚Äî –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ LiqPay\n"
        "üìä –ë–∞–ª–∞–Ω—Å ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –≤–∞—à –±–∞–ª–∞–Ω—Å\n"
        "üì± –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è ‚Äî –¥–æ–¥–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω (–Ω–æ–≤–∏–º ‚Äî –±–æ–Ω—É—Å)\n\n"
        f"–°—Ç–∞—Ç—É—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {reg}\n"
        f"–í–∞—à –±–∞–ª–∞–Ω—Å: {bal} –∫—Ä–µ–¥–∏—Ç—ñ–≤"
    )
    await update.message.reply_text(text, reply_markup=main_menu_keyboard())

# -----------------------------------------------------------------------------
# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è (ConversationHandler)
# -----------------------------------------------------------------------------
WAIT_PHONE = 10

def _normalize_phone(p: str) -> str:
    digits = "".join(ch for ch in p if ch.isdigit())
    return ("+" + digits) if digits and not p.strip().startswith("+") else (p if p.startswith("+") else "+" + digits)

async def register_cmd_or_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    ensure_user(uid)
    kb = [[KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]]
    await update.message.reply_text(
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É, —â–æ–± –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è **—Å–≤–æ—ó–º** –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É:",
        reply_markup=ReplyKeyboardMarkup(kb, one_time_keyboard=True, resize_keyboard=True)
    )
    return WAIT_PHONE

async def on_contact_register(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    contact = update.message.contact
    if not contact:
        kb = [[KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]]
        await update.message.reply_text(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å **–∫–æ–Ω—Ç–∞–∫—Ç** –∫–Ω–æ–ø–∫–æ—é –Ω–∏–∂—á–µ.",
            reply_markup=ReplyKeyboardMarkup(kb, one_time_keyboard=True, resize_keyboard=True),
        )
        return WAIT_PHONE

    if contact.user_id and contact.user_id != uid:
        kb = [[KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]]
        await update.message.reply_text(
            "–ó–¥–∞—î—Ç—å—Å—è, —Ü–µ –Ω–µ –≤–∞—à –Ω–æ–º–µ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=ReplyKeyboardMarkup(kb, one_time_keyboard=True, resize_keyboard=True),
        )
        return WAIT_PHONE

    phone_norm = _normalize_phone(contact.phone_number or "")
    is_new, credited = register_or_update_phone(uid, phone_norm, initial_bonus=INITIAL_BONUS)
    bal = get_balance(uid)

    if is_new and credited > 0:
        msg = f"‚úÖ –î—è–∫—É—î–º–æ –∑–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é!\n–ù–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ –±–æ–Ω—É—Å: +{credited} –∫—Ä–µ–¥–∏—Ç—ñ–≤.\n–í–∞—à –±–∞–ª–∞–Ω—Å: {bal}"
    else:
        msg = f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –∑–±–µ—Ä–µ–∂–µ–Ω–æ.\n–í–∞—à –±–∞–ª–∞–Ω—Å: {bal}"

    await update.message.reply_text(msg, reply_markup=main_menu_keyboard())
    return ConversationHandler.END

async def cancel_register(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_menu_keyboard())
    return ConversationHandler.END

# -----------------------------------------------------------------------------
# –ë–∞–ª–∞–Ω—Å
# -----------------------------------------------------------------------------
async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    ensure_user(uid)
    bal = get_balance(uid)
    phone = get_phone(uid)
    reg = "‚úÖ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–æ–¥–∞–Ω–æ" if phone else "‚ùå –Ω–µ–º–∞—î —Ç–µ–ª–µ—Ñ–æ–Ω—É (–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è)"
    await update.message.reply_text(f"–ë–∞–ª–∞–Ω—Å: {bal} –∫—Ä–µ–¥–∏—Ç—ñ–≤\n–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: {reg}")

# -----------------------------------------------------------------------------
# –ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è
# -----------------------------------------------------------------------------
async def topup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    ensure_user(uid)

    rows = []
    for amount in TOPUP_OPTIONS:
        credits = int(amount // CREDIT_PRICE_UAH)
        rows.append([InlineKeyboardButton(f"üí≥ –ü–æ–ø–æ–≤–Ω–∏—Ç–∏ {amount}‚Ç¥ (~{credits} –∫—Ä–µ–¥–∏—Ç—ñ–≤)", callback_data=f"topup|{amount}")])

    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Å—É–º—É –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è:", reply_markup=InlineKeyboardMarkup(rows))

# -----------------------------------------------------------------------------
# Backlinks
# -----------------------------------------------------------------------------
async def backlinks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = update.message.text.split()[1:]
    if not args:
        return await update.message.reply_text("–ü—Ä–∏–∫–ª–∞–¥: `/backlinks yourdomain.com`", parse_mode="Markdown")
    domain = args[0].strip()

    kb = [
        [
            InlineKeyboardButton("üëÄ –ü–æ–∫–∞–∑–∞—Ç–∏ 10 (5‚Ç¥)", callback_data=f"show|{domain}|10"),
            InlineKeyboardButton("‚¨áÔ∏è CSV 10 (5‚Ç¥)", callback_data=f"csv|{domain}|10"),
        ],
        [
            InlineKeyboardButton("üëÄ –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ (5‚Ç¥)", callback_data=f"show|{domain}|all"),
            InlineKeyboardButton("‚¨áÔ∏è CSV –≤—Å—ñ (5‚Ç¥)", callback_data=f"csv|{domain}|all"),
        ],
    ]
    await update.message.reply_text(
        f"–î–æ–º–µ–Ω: *{domain}*\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é (–∑ –∫–æ–∂–Ω–æ—ó –¥—ñ—ó –±—É–¥–µ —Å–ø–∏—Å–∞–Ω–æ 5‚Ç¥):",
        reply_markup=InlineKeyboardMarkup(kb),
        parse_mode="Markdown",
    )

# -----------------------------------------------------------------------------
# CALLBACKS
# -----------------------------------------------------------------------------
async def on_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    uid = update.effective_user.id
    data = (query.data or "").split("|")

    # --- –ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è ---
    if data[0] == "topup":
        try:
            amount_uah = int(data[1])
        except Exception:
            return await query.edit_message_text("–ù–µ–≤—ñ—Ä–Ω–∞ —Å—É–º–∞.")

        # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–≤–æ–π—Å —É –±–µ–∫–µ–Ω–¥—ñ
        try:
            async with AsyncClient(timeout=20) as c:
                r = await c.post(f"{BACKEND_BASE}/api/payments/create", json={"user_id": uid, "amount": amount_uah})
                r.raise_for_status()
                resp = r.json()
        except ConnectError:
            return await query.edit_message_text("‚ùå –ë–µ–∫–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –ü–µ—Ä–µ–≤—ñ—Ä BACKEND_BASE —ñ mybot-api (–ø–æ—Ä—Ç 8000).")
        except HTTPError as e:
            return await query.edit_message_text(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É: {e}")

        url = resp.get("invoiceUrl")
        if not url:
            return await query.edit_message_text("–ù–µ –æ—Ç—Ä–∏–º–∞–≤ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ–ø–ª–∞—Ç—É.")
        kb = [[InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏ (LiqPay)", url=url)]]
        return await query.edit_message_text(
            f"–†–∞—Ö—É–Ω–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ –Ω–∞ {amount_uah}‚Ç¥. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å, —â–æ–± –æ–ø–ª–∞—Ç–∏—Ç–∏:",
            reply_markup=InlineKeyboardMarkup(kb)
        )

    # --- –ü–ª–∞—Ç–Ω—ñ –¥—ñ—ó (backlinks) ---
    if len(data) != 3:
        return await query.edit_message_text("–ù–µ–≤—ñ—Ä–Ω–∏–π –∑–∞–ø–∏—Ç.")
    action, domain, scope = data

    # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ 5 –≥—Ä–Ω —É –∫—Ä–µ–¥–∏—Ç–∏
    need_credits = _uah_to_credits(BACKLINKS_CHARGE_UAH)

    # –°–ø–∏—Å–∞–Ω–Ω—è
    if not charge(uid, need_credits, domain, scope):
        # –ü—Ä–æ–ø–æ–Ω—É—î–º–æ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è
        rows = []
        for amount in TOPUP_OPTIONS:
            credits = int(amount // CREDIT_PRICE_UAH)
            rows.append([InlineKeyboardButton(f"üí≥ –ü–æ–ø–æ–≤–Ω–∏—Ç–∏ {amount}‚Ç¥ (~{credits} –∫—Ä–µ–¥–∏—Ç—ñ–≤)", callback_data=f"topup|{amount}")])
        return await query.edit_message_text(
            f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫—Ä–µ–¥–∏—Ç—ñ–≤ (–ø–æ—Ç—Ä—ñ–±–Ω–æ {need_credits}). –ü–æ–ø–æ–≤–Ω—ñ—Ç—å –±–∞–ª–∞–Ω—Å.",
            reply_markup=InlineKeyboardMarkup(rows)
        )

    # –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –¥–æ DataForSEO
    try:
        limit = PREVIEW_COUNT if scope == "10" else CSV_MAX
        data_resp = await dfs.backlinks_live(domain, limit=limit, order_by="first_seen,desc")
        items = _extract_items(data_resp)
        if not items:
            bal_now = get_balance(uid)
            return await query.edit_message_text(f"–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π—à–æ–≤ üòï\n–í–∞—à –Ω–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {bal_now} –∫—Ä–µ–¥–∏—Ç—ñ–≤")

        if action == "show":
            cap = PREVIEW_COUNT if scope == "10" else min(50, len(items))
            txt = _fmt_preview(items, cap)
            bal_now = get_balance(uid)
            if scope == "all" and len(items) > cap:
                txt += f"\n\n‚Ä¶–ø–æ–∫–∞–∑–∞–Ω–æ –ø–µ—Ä—à—ñ {cap} –∑ {len(items)}."
            txt += f"\n\nüí∞ –°–ø–∏—Å–∞–Ω–æ {need_credits} –∫—Ä–µ–¥–∏—Ç(–∏). –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {bal_now}"
            await query.edit_message_text(txt)
        elif action == "csv":
            csv_bytes = _items_to_csv_bytes(items)
            bal_now = get_balance(uid)
            await query.message.reply_document(
                document=InputFile(io.BytesIO(csv_bytes), filename=f"{domain}_backlinks_{scope}.csv"),
                caption=f"–ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è {domain} ({'10' if scope=='10' else 'all'})\nüí∞ –°–ø–∏—Å–∞–Ω–æ {need_credits}. –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {bal_now}"
            )
            await query.edit_message_text("–ì–æ—Ç–æ–≤–æ ‚úÖ")
        else:
            await query.edit_message_text("–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è.")
    except HTTPError as e:
        log.exception("HTTP error")
        await query.edit_message_text(f"DataForSEO HTTP error: {e}")
    except Exception as e:
        log.exception("Unexpected error")
        await query.edit_message_text(f"–ü–æ–º–∏–ª–∫–∞: {e}")

# -----------------------------------------------------------------------------
# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –ø–æ –º–µ–Ω—é (reply keyboard)
# -----------------------------------------------------------------------------
async def on_menu_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()

    if text == "üîó Backlinks":
        return await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É —É —Ñ–æ—Ä–º–∞—Ç—ñ: /backlinks yourdomain.com")
    if text == "üí≥ –ü–æ–ø–æ–≤–Ω–∏—Ç–∏":
        return await topup(update, context)
    if text == "üìä –ë–∞–ª–∞–Ω—Å":
        return await balance(update, context)
    if text == "üì± –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è":
        # –∑–∞–ø—É—Å–∫ —Ä–æ–∑–º–æ–≤–∏ /register —á–µ—Ä–µ–∑ entry_point
        return await register_cmd_or_menu(update, context)

# -----------------------------------------------------------------------------
# MAIN
# -----------------------------------------------------------------------------
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("balance", balance))
    app.add_handler(CommandHandler("topup", topup))
    app.add_handler(CommandHandler("backlinks", backlinks))

    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —è–∫ —Ä–æ–∑–º–æ–≤–∞ ‚Äî –≤–∞–∂–ª–∏–≤–æ –¥–æ–¥–∞—Ç–∏ –†–ê–ù–Ü–®–ï –∑–∞ –∑–∞–≥–∞–ª—å–Ω—ñ text-—Ö–µ–Ω–¥–ª–µ—Ä–∏
    reg_conv = ConversationHandler(
        entry_points=[
            CommandHandler("register", register_cmd_or_menu),
            MessageHandler(filters.Regex(r"^üì± –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è$"), register_cmd_or_menu),
        ],
        states={
            WAIT_PHONE: [MessageHandler(filters.CONTACT, on_contact_register)],
        },
        fallbacks=[CommandHandler("cancel", cancel_register)],
        allow_reentry=True,
    )
    app.add_handler(reg_conv)

    # Callback‚Äô–∏
    app.add_handler(CallbackQueryHandler(on_choice))

    # –ö–µ—Ä—É–≤–∞–Ω–Ω—è –º–µ–Ω—é (reply keyboard)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_menu_text))

    log.info("Bot started. DFS_BASE=%s BACKEND_BASE=%s", DFS_BASE, BACKEND_BASE)
    app.run_polling(close_loop=False)

if __name__ == "__main__":
    main()
