# bot.py
import os
import csv
import io
import math
import uuid
import logging

from dotenv import load_dotenv
from telegram import (
    Update, InputFile, InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    CallbackQueryHandler, MessageHandler, filters
)
from httpx import HTTPError, AsyncClient, ConnectError

from dataforseo import DataForSEO
from dao import (
    init_db, ensure_user, get_balance, charge, get_phone, register_or_update_phone,
    list_users, count_users, get_user, add_credits
)

logging.basicConfig(level=logging.INFO)
log = logging.getLogger(__name__)

# === ENV ===
load_dotenv()
TELEGRAM_TOKEN = os.environ["TELEGRAM_BOT_TOKEN"]

DFS_LOGIN = os.environ["DATAFORSEO_LOGIN"]
DFS_PASS = os.environ["DATAFORSEO_PASSWORD"]
DFS_BASE = os.getenv("DATAFORSEO_BASE", "https://api.dataforseo.com")

BACKEND_BASE = os.getenv("BACKEND_BASE", "http://127.0.0.1:8001").rstrip("/")

CREDIT_PRICE_UAH = float(os.getenv("CREDIT_PRICE_UAH", "5"))
CHARGE_BACKLINKS_UAH = float(os.getenv("CHARGE_BACKLINKS_UAH", "5"))
CHARGE_BACKLINKS_CREDITS = max(1, math.ceil(CHARGE_BACKLINKS_UAH / CREDIT_PRICE_UAH))

TOPUP_OPTIONS = [int(x.strip()) for x in os.getenv("TOPUP_OPTIONS", "100,250,500").split(",") if x.strip().isdigit()]

# –∞–¥–º—ñ–Ω–∏ (—á–µ—Ä–µ–∑ –∫–æ–º—É): ADMIN_IDS=123,456
ADMIN_IDS = {int(x) for x in os.getenv("ADMIN_IDS", "").replace(";", ",").split(",") if x.strip().isdigit()}

# === INIT ===
init_db()
dfs = DataForSEO(DFS_LOGIN, DFS_PASS, DFS_BASE)

# === HELPERS ===
def _extract_items(resp: dict) -> list[dict]:
    tasks = resp.get("tasks") or []
    if not tasks:
        return []
    t = tasks[0] or {}
    if t.get("status_code") and t["status_code"] != 20000:
        raise RuntimeError(t.get("status_message") or f"Task error: {t.get('status_code')}")
    res = t.get("result") or []
    if not res:
        return []
    return res[0].get("items") or []

def _fmt_preview(items: list[dict], cap: int) -> str:
    lines = []
    for it in items[:cap]:
        url_from = (it.get("page_from") or {}).get("url_from") or it.get("url_from")
        anchor = (it.get("anchor") or "").strip()
        first_seen = it.get("first_seen")
        lines.append(f"‚Ä¢ {url_from}\n  anchor: {anchor[:80]} | first_seen: {first_seen}")
    return "\n".join(lines)

def _items_to_csv_bytes(items: list[dict]) -> bytes:
    buf = io.StringIO()
    writer = csv.writer(buf)
    writer.writerow(["url_from", "url_to", "anchor", "dofollow", "first_seen", "last_seen", "domain_from"])
    for it in items:
        writer.writerow([
            (it.get("page_from") or {}).get("url_from") or it.get("url_from"),
            it.get("url_to"),
            (it.get("anchor") or "").replace("\n", " ").strip(),
            it.get("dofollow"),
            it.get("first_seen"),
            it.get("last_visited"),
            it.get("domain_from")
        ])
    return buf.getvalue().encode()

def _main_menu_kb() -> ReplyKeyboardMarkup:
    rows = [
        ["üîé Backlinks", "üí≥ –ü–æ–ø–æ–≤–Ω–∏—Ç–∏"],
        ["üì± –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è", "üíº –ë–∞–ª–∞–Ω—Å"],
    ]
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

# === PUBLIC COMMANDS ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    ensure_user(uid)
    bal = get_balance(uid)
    phone = get_phone(uid)
    reg_line = "–°—Ç–∞—Ç—É—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: ‚úÖ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–æ–¥–∞–Ω–æ" if phone else "–°—Ç–∞—Ç—É—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: ‚ùå –Ω–µ–º–∞—î —Ç–µ–ª–µ—Ñ–æ–Ω—É (–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /register)"
    extra = "\n/admin ‚Äî –∞–¥–º—ñ–Ω-–º–µ–Ω—é" if uid in ADMIN_IDS else ""
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø SEO-–±–æ—Ç –∑ –±–∞–ª–∞–Ω—Å–æ–º.\n"
        "/register ‚Äî –¥–æ–¥–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (–Ω–æ–≤–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –±–æ–Ω—É—Å)\n"
        "/backlinks <–¥–æ–º–µ–Ω> ‚Äî –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –±–µ–∫–ª—ñ–Ω–∫—ñ–≤ (—Å–ø–∏—Å–∞–Ω–Ω—è ~"
        f"{CHARGE_BACKLINKS_CREDITS} –∫—Ä–µ–¥–∏—Ç/—ñ–≤ ‚âà {CHARGE_BACKLINKS_UAH:.0f} –≥—Ä–Ω)\n"
        "/balance ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –±–∞–ª–∞–Ω—Å\n"
        "/topup ‚Äî –ø–æ–ø–æ–≤–Ω–∏—Ç–∏ –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ LiqPay"
        f"{extra}\n\n"
        f"{reg_line}\n–í–∞—à –±–∞–ª–∞–Ω—Å: {bal} –∫—Ä–µ–¥–∏—Ç—ñ–≤",
        reply_markup=_main_menu_kb()
    )

async def register(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    ensure_user(uid)
    kb = [[KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]]
    await update.message.reply_text(
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É, —â–æ–± –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è –≤–ª–∞—Å–Ω–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É:",
        reply_markup=ReplyKeyboardMarkup(kb, one_time_keyboard=True, resize_keyboard=True)
    )

async def on_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    contact = update.message.contact
    if not contact:
        return
    if contact.user_id and contact.user_id != uid:
        return await update.message.reply_text(
            "–ó–¥–∞—î—Ç—å—Å—è, —Ü–µ –Ω–µ –≤–∞—à –Ω–æ–º–µ—Ä. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–∞–º–µ —Å–≤–æ—ó–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.",
            reply_markup=ReplyKeyboardRemove()
        )
    is_new, credited = register_or_update_phone(uid, contact.phone_number, initial_bonus=int(os.getenv("INITIAL_BONUS", "10")))
    bal = get_balance(uid)
    if is_new and credited > 0:
        txt = f"‚úÖ –î—è–∫—É—î–º–æ –∑–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é! –ù–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ –±–æ–Ω—É—Å: +{credited} –∫—Ä–µ–¥–∏—Ç—ñ–≤.\n–í–∞—à –±–∞–ª–∞–Ω—Å: {bal}"
    else:
        txt = f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –í–∞—à –±–∞–ª–∞–Ω—Å: {bal}"
    await update.message.reply_text(txt, reply_markup=_main_menu_kb())

async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    ensure_user(uid)
    bal = get_balance(uid)
    phone = get_phone(uid)
    reg_line = "‚úÖ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–æ–¥–∞–Ω–æ" if phone else "‚ùå –Ω–µ–º–∞—î —Ç–µ–ª–µ—Ñ–æ–Ω—É (–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /register)"
    await update.message.reply_text(f"–ë–∞–ª–∞–Ω—Å: {bal} –∫—Ä–µ–¥–∏—Ç—ñ–≤\n–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: {reg_line}", reply_markup=_main_menu_kb())

async def topup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    ensure_user(uid)
    rows = []
    for amount in TOPUP_OPTIONS:
        credits = int(amount // CREDIT_PRICE_UAH)
        rows.append([InlineKeyboardButton(f"–ü–æ–ø–æ–≤–Ω–∏—Ç–∏ {amount}‚Ç¥ (~{credits} –∫—Ä–µ–¥–∏—Ç—ñ–≤)", callback_data=f"topup|{amount}")])
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Å—É–º—É –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è:", reply_markup=InlineKeyboardMarkup(rows))

async def backlinks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text.strip().lower() in ("üîé backlinks", "backlinks"):
        return await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å: /backlinks yourdomain.com")

    args = update.message.text.split()[1:]
    if not args:
        return await update.message.reply_text("–ü—Ä–∏–∫–ª–∞–¥: /backlinks yourdomain.com")
    domain = args[0]
    kb = [
        [
            InlineKeyboardButton("üëÄ –ü–æ–∫–∞–∑–∞—Ç–∏ 10 –æ—Å—Ç–∞–Ω–Ω—ñ—Ö", callback_data=f"show|{domain}|10"),
            InlineKeyboardButton("‚¨áÔ∏è CSV (10)", callback_data=f"csv|{domain}|10"),
        ],
        [
            InlineKeyboardButton("üëÄ –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ", callback_data=f"show|{domain}|all"),
            InlineKeyboardButton("‚¨áÔ∏è CSV (–≤—Å—ñ)", callback_data=f"csv|{domain}|all"),
        ],
    ]
    await update.message.reply_text(
        f"–î–æ–º–µ–Ω: {domain}\n–ö–æ–∂–Ω–∞ –¥—ñ—è —Å–ø–∏—Å—É—î ~{CHARGE_BACKLINKS_CREDITS} –∫—Ä–µ–¥–∏—Ç/—ñ–≤ (‚âà {CHARGE_BACKLINKS_UAH:.0f} –≥—Ä–Ω). –û–±–µ—Ä—ñ—Ç—å:",
        reply_markup=InlineKeyboardMarkup(kb),
    )

# === CALLBACKS (–ø–æ–∫—É–ø–∫–∏ + backlinks) ===
async def on_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    uid = update.effective_user.id
    data = query.data.split("|")

    # –ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è
    if data[0] == "topup":
        amount_uah = int(data[1])
        try:
            async with AsyncClient(timeout=20) as c:
                r = await c.post(
                    f"{BACKEND_BASE}/api/payments/create",
                    json={"user_id": uid, "amount_uah": amount_uah}
                )
                r.raise_for_status()
                resp = r.json()
        except ConnectError:
            return await query.edit_message_text(
                "‚ùå –ë–µ–∫–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –ü–µ—Ä–µ–≤—ñ—Ä BACKEND_BASE —ñ —á–∏ –∑–∞–ø—É—â–µ–Ω–∏–π payments_api (–ø–æ—Ä—Ç 8001)."
            )
        except Exception as e:
            log.exception("Create invoice error")
            return await query.edit_message_text(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É: {e}")

        url = resp["invoiceUrl"]
        kb = [[InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏ (LiqPay)", url=url)]]
        return await query.edit_message_text(
            f"–†–∞—Ö—É–Ω–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ –Ω–∞ {amount_uah}‚Ç¥. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å, —â–æ–± –æ–ø–ª–∞—Ç–∏—Ç–∏:",
            reply_markup=InlineKeyboardMarkup(kb)
        )

    # Backlinks ‚Äî —Ñ—ñ–∫—Å–æ–≤–∞–Ω–µ —Å–ø–∏—Å–∞–Ω–Ω—è
    try:
        action, domain, scope = data
    except ValueError:
        return await query.edit_message_text("–ù–µ–≤—ñ—Ä–Ω–∏–π –∑–∞–ø–∏—Ç.")

    cost = CHARGE_BACKLINKS_CREDITS
    if not charge(uid, cost, domain, f"{action}:{scope}"):
        rows = []
        for amount in TOPUP_OPTIONS:
            credits = int(amount // CREDIT_PRICE_UAH)
            rows.append([InlineKeyboardButton(
                f"üí≥ –ü–æ–ø–æ–≤–Ω–∏—Ç–∏ {amount}‚Ç¥ (~{credits} –∫—Ä–µ–¥–∏—Ç—ñ–≤)", callback_data=f"topup|{amount}"
            )])
        return await query.edit_message_text(
            f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫—Ä–µ–¥–∏—Ç—ñ–≤ (–ø–æ—Ç—Ä—ñ–±–Ω–æ {cost}). –ü–æ–ø–æ–≤–Ω—ñ—Ç—å –±–∞–ª–∞–Ω—Å.",
            reply_markup=InlineKeyboardMarkup(rows)
        )

    limit = 10 if scope == "10" else 1000
    try:
        data = await dfs.backlinks_live(domain, limit=limit, order_by="first_seen,desc")
        items = _extract_items(data)
        if not items:
            new_bal = get_balance(uid)
            await query.edit_message_text("–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π—à–æ–≤ üòï")
            return await query.message.reply_text(f"–í–∞—à –Ω–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {new_bal} –∫—Ä–µ–¥–∏—Ç—ñ–≤")

        if action == "show":
            cap = 10 if scope == "10" else 50
            txt = _fmt_preview(items, cap)
            if scope == "all" and len(items) > cap:
                txt += f"\n\n‚Ä¶–ø–æ–∫–∞–∑–∞–Ω–æ –ø–µ—Ä—à—ñ {cap} –∑ {len(items)}. –û–±–µ—Ä—ñ—Ç—å CSV (–≤—Å—ñ), —â–æ–± –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–æ–≤–Ω–∏–π —Å–ø–∏—Å–æ–∫."
            await query.edit_message_text(txt)
            await query.message.reply_text(f"‚úÖ –û–ø–µ—Ä–∞—Ü—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–∞. –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {get_balance(uid)} –∫—Ä–µ–¥–∏—Ç—ñ–≤")
        elif action == "csv":
            csv_bytes = _items_to_csv_bytes(items)
            await query.message.reply_document(
                document=InputFile(io.BytesIO(csv_bytes), filename=f"{domain}_backlinks_{scope}.csv"),
                caption=f"–ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è {domain} ({'10' if scope=='10' else 'all'})"
            )
            await query.message.reply_text(f"‚úÖ –§–∞–π–ª –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ. –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {get_balance(uid)} –∫—Ä–µ–¥–∏—Ç—ñ–≤")
        else:
            await query.edit_message_text("–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è.")
            await query.message.reply_text(f"–ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {get_balance(uid)} –∫—Ä–µ–¥–∏—Ç—ñ–≤")

    except HTTPError as e:
        log.exception("HTTP error")
        await query.edit_message_text(f"DataForSEO HTTP error: {e}")
        await query.message.reply_text(f"–ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {get_balance(uid)} –∫—Ä–µ–¥–∏—Ç—ñ–≤")
    except Exception as e:
        log.exception("Unexpected error")
        await query.edit_message_text(f"–ü–æ–º–∏–ª–∫–∞: {e}")
        await query.message.reply_text(f"–ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {get_balance(uid)} –∫—Ä–µ–¥–∏—Ç—ñ–≤")

# === –ê–î–ú–Ü–ù–ö–ê ===
def _admin_kb(page: int = 0, total: int = 0, page_size: int = 10):
    buttons = [[InlineKeyboardButton("üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", callback_data=f"admin|list|{page}")],
               [InlineKeyboardButton("üì§ –ï–∫—Å–ø–æ—Ä—Ç CSV", callback_data="admin|export")]]
    # –ø–∞–≥—ñ–Ω–∞—Ü—ñ—è —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –º–∏ –≤ —Å–ø–∏—Å–∫—É
    pages = max(1, math.ceil(total / page_size)) if total else 1
    if total:
        prev_page = (page - 1) % pages
        next_page = (page + 1) % pages
        buttons.append([
            InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"admin|list|{prev_page}"),
            InlineKeyboardButton(f"{page+1}/{pages}", callback_data=f"noop"),
            InlineKeyboardButton("‚û°Ô∏è", callback_data=f"admin|list|{next_page}")
        ])
    return InlineKeyboardMarkup(buttons)

async def admin_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if uid not in ADMIN_IDS:
        return await update.message.reply_text("‚õî –ù–µ–º–∞ –¥–æ—Å—Ç—É–ø—É.")
    total = count_users()
    await update.message.reply_text(
        f"–ê–¥–º—ñ–Ω-–º–µ–Ω—é. –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {total}",
        reply_markup=_admin_kb(page=0, total=total)
    )

async def on_admin_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if uid not in ADMIN_IDS:
        return await update.callback_query.answer("‚õî –ù–µ–º–∞ –¥–æ—Å—Ç—É–ø—É.", show_alert=True)

    q = update.callback_query
    parts = q.data.split("|")

    if parts[0] == "noop":
        return await q.answer()

    if parts[0] != "admin":
        return

    action = parts[1]

    if action == "list":
        page = int(parts[2]) if len(parts) > 2 else 0
        page_size = 10
        offset = page * page_size
        users = list_users(offset=offset, limit=page_size)
        total = count_users()

        if not users:
            return await q.edit_message_text(
                "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø–æ–∫–∏ –Ω–µ–º–∞—î.",
                reply_markup=_admin_kb(page=page, total=total, page_size=page_size)
            )

        lines = []
        for u in users:
            uid2 = u["user_id"]
            bal = u["balance"]
            phone = u["phone"] or "‚Äî"
            lines.append(f"‚Ä¢ <b>{uid2}</b> | –±–∞–ª–∞–Ω—Å: <b>{bal}</b> | üì± {phone}")
        text = "–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–æ—Å—Ç–∞–Ω–Ω—ñ):\n" + "\n".join(lines) + "\n\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —â–æ–± –≤—ñ–¥–∫—Ä–∏—Ç–∏ –∫–∞—Ä—Ç–∫—É."
        # –¥–æ–¥–∞–º–æ —Ä—è–¥ –∫–Ω–æ–ø–æ–∫ –∑ user_id (–ø–æ 5 —É —Ä—è–¥)
        btns = []
        row = []
        for idx, u in enumerate(users, start=1):
            row.append(InlineKeyboardButton(str(u["user_id"]), callback_data=f"admin|user|{u['user_id']}"))
            if idx % 5 == 0:
                btns.append(row)
                row = []
        if row:
            btns.append(row)
        # + –ø–∞–≥—ñ–Ω–∞—Ü—ñ—è/–º–µ–Ω—é
        base = _admin_kb(page=page, total=total, page_size=page_size).inline_keyboard
        kb = InlineKeyboardMarkup(btns + base)
        return await q.edit_message_text(text, reply_markup=kb, parse_mode="HTML")

    if action == "user":
        uid2 = int(parts[2])
        u = get_user(uid2)
        if not u:
            return await q.answer("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        txt = (
            f"üë§ <b>{u['user_id']}</b>\n"
            f"–ë–∞–ª–∞–Ω—Å: <b>{u['balance']}</b>\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: <b>{u['phone'] or '‚Äî'}</b>\n"
            f"–°—Ç–≤–æ—Ä–µ–Ω–æ: {u['created_at']}"
        )
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ûï +10 –∫—Ä–µ–¥–∏—Ç—ñ–≤", callback_data=f"admin|give|{uid2}|10"),
             InlineKeyboardButton("‚ûñ -10 –∫—Ä–µ–¥–∏—Ç—ñ–≤", callback_data=f"admin|give|{uid2}|-10")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É", callback_data="admin|list|0")]
        ])
        return await q.edit_message_text(txt, reply_markup=kb, parse_mode="HTML")

    if action == "give":
        uid2 = int(parts[2])
        delta = int(parts[3])
        ok = add_credits(uid2, delta, reason="admin_panel")
        if not ok:
            return await q.answer("–ù–µ –≤–¥–∞–ª–æ—Å—å –∑–º—ñ–Ω–∏—Ç–∏ –±–∞–ª–∞–Ω—Å", show_alert=True)
        u = get_user(uid2)
        txt = (
            f"‚úÖ –ë–∞–ª–∞–Ω—Å –∑–º—ñ–Ω–µ–Ω–æ.\n\n"
            f"üë§ <b>{u['user_id']}</b>\n"
            f"–ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: <b>{u['balance']}</b>\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: <b>{u['phone'] or '‚Äî'}</b>"
        )
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ûï +10", callback_data=f"admin|give|{uid2}|10"),
             InlineKeyboardButton("‚ûñ -10", callback_data=f"admin|give|{uid2}|-10")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É", callback_data="admin|list|0")]
        ])
        return await q.edit_message_text(txt, reply_markup=kb, parse_mode="HTML")

    if action == "export":
        # –∑–ª–∏–≤–∞—î–º–æ –≤—Å—ñ—Ö —É CSV
        total = count_users()
        page_size = 500
        out = io.StringIO()
        w = csv.writer(out)
        w.writerow(["user_id", "balance", "phone", "created_at"])
        fetched = 0
        page = 0
        while fetched < total:
            users = list_users(offset=page * page_size, limit=page_size)
            for u in users:
                w.writerow([u["user_id"], u["balance"], u["phone"] or "", u["created_at"]])
            fetched += len(users)
            page += 1

        data = out.getvalue().encode()
        await q.message.reply_document(
            document=InputFile(io.BytesIO(data), filename="users_export.csv"),
            caption=f"–ï–∫—Å–ø–æ—Ä—Ç {total} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"
        )
        return await q.answer("–ì–æ—Ç–æ–≤–æ!")

# === TEXT MENU ===
async def _on_text_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = (update.message.text or "").strip().lower()
    if txt in ("üíº –±–∞–ª–∞–Ω—Å", "–±–∞–ª–∞–Ω—Å", "/balance"):
        return await balance(update, context)
    if txt in ("üì± —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è", "—Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è", "/register"):
        return await register(update, context)
    if txt in ("üí≥ –ø–æ–ø–æ–≤–Ω–∏—Ç–∏", "–ø–æ–ø–æ–≤–Ω–∏—Ç–∏", "/topup"):
        return await topup(update, context)
    if txt in ("üîé backlinks", "backlinks", "/backlinks"):
        return await backlinks(update, context)
    if txt in ("/admin", "admin") and update.effective_user.id in ADMIN_IDS:
        # –∑—Ä—É—á–Ω—ñ—Å—Ç—å: —è–∫—â–æ –Ω–∞–±—Ä–∞–ª–∏ "admin" —Ç–µ–∫—Å—Ç–æ–º
        return await admin_cmd(update, context)

def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # –ø—É–±–ª—ñ—á–Ω—ñ
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("register", register))
    app.add_handler(MessageHandler(filters.CONTACT, on_contact))
    app.add_handler(CommandHandler("balance", balance))
    app.add_handler(CommandHandler("topup", topup))
    app.add_handler(CommandHandler("backlinks", backlinks))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, _on_text_menu))
    app.add_handler(CallbackQueryHandler(on_choice))

    # –∞–¥–º—ñ–Ω
    app.add_handler(CommandHandler("admin", admin_cmd))
    app.add_handler(CallbackQueryHandler(on_admin_cb, pattern="^(admin\\||noop$)"))

    log.info(
        "Bot started. DFS_BASE=%s BACKEND_BASE=%s CREDIT_PRICE_UAH=%.2f CHARGE_BACKLINKS_UAH=%.2f (= %d credits) ADMIN_IDS=%s",
        DFS_BASE, BACKEND_BASE, CREDIT_PRICE_UAH, CHARGE_BACKLINKS_UAH, CHARGE_BACKLINKS_CREDITS, ADMIN_IDS
    )
    app.run_polling(close_loop=False)

if __name__ == "__main__":
    main()
