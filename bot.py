# bot.py
import os
import io
import csv
import uuid
import logging

from dotenv import load_dotenv
from httpx import AsyncClient, HTTPError, ConnectError
from telegram import (
    Update, InputFile,
    InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardMarkup, ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

# ===== –Ω–∞—à—ñ –º–æ–¥—É–ª—ñ =====
from dataforseo import DataForSEO
from dao import (
    init_db, ensure_user, get_balance, charge,
    get_phone, register_or_update_phone
)

# ----------------- –õ–û–ì–ò -----------------
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("bot")

# ----------------- ENV ------------------
load_dotenv()

TELEGRAM_TOKEN = os.environ["TELEGRAM_BOT_TOKEN"]

DFS_LOGIN = os.environ["DATAFORSEO_LOGIN"]
DFS_PASS  = os.environ["DATAFORSEO_PASSWORD"]
DFS_BASE  = os.getenv("DATAFORSEO_BASE", "https://api.dataforseo.com")

BACKEND_BASE = os.getenv("BACKEND_BASE", "http://127.0.0.1:8001").rstrip("/")

# 1 –∫—Ä–µ–¥–∏—Ç = N –≥—Ä–Ω
CREDIT_PRICE_UAH = float(os.getenv("CREDIT_PRICE_UAH", "5"))

# –°–∫—ñ–ª—å–∫–∏ –≥—Ä–Ω —Å–ø–∏—Å—É–≤–∞—Ç–∏ –∑–∞ –±–µ–∫–ª—ñ–Ω–∫–∏ (–ø–æ–∫–∞–∑/CSV)
BACKLINKS_PRICE_UAH = float(os.getenv("BACKLINKS_PRICE_UAH", "5"))

INITIAL_BONUS = int(os.getenv("INITIAL_BONUS", "10"))

TOPUP_OPTIONS = [
    int(x.strip())
    for x in os.getenv("TOPUP_OPTIONS", "100,250,500").split(",")
    if x.strip().isdigit()
]

ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))  # 0 = –≤–∏–º–∫–Ω–µ–Ω–æ

# ----------------- INIT -----------------
init_db()
dfs = DataForSEO(DFS_LOGIN, DFS_PASS, DFS_BASE)

# =========================================================
#                     UI: –ö–õ–ê–í–Ü–ê–¢–£–†–ò
# =========================================================
def make_main_kb(user_id: int) -> ReplyKeyboardMarkup:
    rows = [
        ["üîó Backlinks", "üí≥ –ü–æ–ø–æ–≤–Ω–∏—Ç–∏"],
        ["üìä –ë–∞–ª–∞–Ω—Å", "üì± –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è"],
    ]
    if ADMIN_ID and user_id == ADMIN_ID:
        rows.append(["üõ† –ê–¥–º—ñ–Ω–∫–∞"])
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

def topup_inline_kb() -> InlineKeyboardMarkup:
    rows = []
    for amount in TOPUP_OPTIONS:
        approx_credits = int(amount // CREDIT_PRICE_UAH)
        rows.append([InlineKeyboardButton(
            f"üí≥ –ü–æ–ø–æ–≤–Ω–∏—Ç–∏ {amount}‚Ç¥ (~{approx_credits} –∫—Ä–µ–¥–∏—Ç—ñ–≤)",
            callback_data=f"topup|{amount}"
        )])
    return InlineKeyboardMarkup(rows)

def backlinks_inline_kb(domain: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üëÄ –ü–æ–∫–∞–∑–∞—Ç–∏ 10", callback_data=f"show|{domain}|10"),
            InlineKeyboardButton("‚¨áÔ∏è CSV (10)",    callback_data=f"csv|{domain}|10"),
        ],
        [
            InlineKeyboardButton("üëÄ –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ", callback_data=f"show|{domain}|all"),
            InlineKeyboardButton("‚¨áÔ∏è CSV (–≤—Å—ñ)",    callback_data=f"csv|{domain}|all"),
        ],
    ])

# =========================================================
#                     –•–ï–õ–ü–ï–†–ò
# =========================================================
def _uah_to_credits(uah: float) -> int:
    # –º—ñ–Ω—ñ–º—É–º 1 –∫—Ä–µ–¥–∏—Ç
    return max(1, int(round(uah / CREDIT_PRICE_UAH)))

def _extract_items(resp: dict) -> list[dict]:
    tasks = resp.get("tasks") or []
    if not tasks:
        return []
    t = tasks[0] or {}
    if t.get("status_code") and t["status_code"] != 20000:
        raise RuntimeError(t.get("status_message") or f"Task error: {t.get('status_code')}")
    res = t.get("result") or []
    if not res:
        return []
    return res[0].get("items") or []

def _fmt_preview(items: list[dict], cap: int) -> str:
    lines = []
    for it in items[:cap]:
        url_from = (it.get("page_from") or {}).get("url_from") or it.get("url_from")
        anchor = (it.get("anchor") or "").strip().replace("\n", " ")
        first_seen = it.get("first_seen")
        lines.append(f"‚Ä¢ {url_from}\n  anchor: {anchor[:80]} | first_seen: {first_seen}")
    return "\n".join(lines)

def _items_to_csv_bytes(items: list[dict]) -> bytes:
    buf = io.StringIO()
    w = csv.writer(buf)
    w.writerow(["url_from", "url_to", "anchor", "dofollow", "first_seen", "last_seen", "domain_from"])
    for it in items:
        w.writerow([
            (it.get("page_from") or {}).get("url_from") or it.get("url_from"),
            it.get("url_to"),
            (it.get("anchor") or "").replace("\n", " ").strip(),
            it.get("dofollow"),
            it.get("first_seen"),
            it.get("last_visited"),
            it.get("domain_from")
        ])
    return buf.getvalue().encode()

# =========================================================
#                     –•–ï–ù–î–õ–ï–†–ò
# =========================================================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    ensure_user(uid)
    bal = get_balance(uid)
    phone = get_phone(uid)
    reg = "‚úÖ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–æ–¥–∞–Ω–æ" if phone else "‚ùå –Ω–µ–º–∞—î —Ç–µ–ª–µ—Ñ–æ–Ω—É (–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è)"

    text = (
        "–ü—Ä–∏–≤—ñ—Ç! –Ø SEO-–±–æ—Ç –∑ –±–∞–ª–∞–Ω—Å–æ–º.\n\n"
        "–ö–æ–º–∞–Ω–¥–∏/–º–µ–Ω—é:\n"
        "üîó Backlinks ‚Äî –æ—Ç—Ä–∏–º–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ –∞–±–æ –≤—Å—ñ –±–µ–∫–ª—ñ–Ω–∫–∏ –π CSV\n"
        "üí≥ –ü–æ–ø–æ–≤–Ω–∏—Ç–∏ ‚Äî –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ LiqPay\n"
        "üìä –ë–∞–ª–∞–Ω—Å ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –≤–∞—à –±–∞–ª–∞–Ω—Å\n"
        "üì± –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è ‚Äî –¥–æ–¥–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω (–Ω–æ–≤–∏–º ‚Äî –±–æ–Ω—É—Å)\n\n"
        f"–°—Ç–∞—Ç—É—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {reg}\n"
        f"–í–∞—à –±–∞–ª–∞–Ω—Å: {bal} –∫—Ä–µ–¥–∏—Ç—ñ–≤"
    )
    await update.message.reply_text(text, reply_markup=make_main_kb(uid))

async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∑ –µ–º–æ–¥–∑—ñ."""
    uid = update.effective_user.id
    text = (update.message.text or "").strip()

    if text.startswith("üîó"):
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É —É —Ñ–æ—Ä–º–∞—Ç—ñ: `backlinks –≤–∞—à_–¥–æ–º–µ–Ω` (–±–µ–∑ http‚Ä¶)", parse_mode="Markdown")
        return
    if text.startswith("üí≥"):
        return await topup(update, context)
    if text.startswith("üìä"):
        return await balance(update, context)
    if text.startswith("üì±"):
        return await register(update, context)
    if text.startswith("üõ†") and ADMIN_ID and uid == ADMIN_ID:
        return await admin(update, context)

    # –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —à–≤–∏–¥–∫–æ–≥–æ –≤–≤–æ–¥—É "backlinks domain.com"
    if text.lower().startswith("backlinks"):
        parts = text.split()
        if len(parts) >= 2:
            fake = Update.de_json(update.to_dict(), context.application.bot)
            update.message.text = "/backlinks " + parts[1]
            return await backlinks(update, context)

    await update.message.reply_text("–ù–µ –≤–ø—ñ–∑–Ω–∞—é –∫–æ–º–∞–Ω–¥—É. –°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é ‚¨áÔ∏è", reply_markup=make_main_kb(uid))

async def register(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    ensure_user(uid)
    kb = ReplyKeyboardMarkup([[ "üì± –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä (—Ç–µ–ª–µ–≥—Ä–∞–º)" ]], resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text(
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É –∫–Ω–æ–ø–∫—É *–ø—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É* –≤ Telegram (—ñ–∫–æ–Ω–∫–∞ —Å–∫—Ä—ñ–ø–∫–∏ ‚ûú –ö–æ–Ω—Ç–∞–∫—Ç), "
        "–∞–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∏–∂—á–µ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ —Å–≤—ñ–π –Ω–æ–º–µ—Ä.",
        reply_markup=kb, parse_mode="Markdown"
    )

async def on_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    contact = update.message.contact
    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –Ω–∞–¥—ñ—Å–ª–∞–≤ —Å–∏—Å—Ç–µ–º–Ω–∏–π –∫–æ–Ω—Ç–∞–∫—Ç ‚Äî –ø—Ä–æ–±—É—î–º–æ –≤–∑—è—Ç–∏ —Ç–µ–∫—Å—Ç
    if not contact and update.message.text and update.message.text.startswith("+"):
        ph = update.message.text.strip()
        is_new, credited = register_or_update_phone(uid, ph, initial_bonus=INITIAL_BONUS)
    else:
        if not contact:
            return
        if contact.user_id and contact.user_id != uid:
            return await update.message.reply_text(
                "–ó–¥–∞—î—Ç—å—Å—è, —Ü–µ –Ω–µ –≤–∞—à –Ω–æ–º–µ—Ä. –ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–∞–º–µ —Å–≤–æ—ó–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.",
                reply_markup=ReplyKeyboardRemove()
            )
        is_new, credited = register_or_update_phone(uid, contact.phone_number, initial_bonus=INITIAL_BONUS)

    bal = get_balance(uid)
    if is_new and credited > 0:
        txt = f"‚úÖ –î—è–∫—É—é! –ù–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ –±–æ–Ω—É—Å +{credited} –∫—Ä–µ–¥–∏—Ç—ñ–≤.\n–í–∞—à –±–∞–ª–∞–Ω—Å: {bal}"
    else:
        txt = f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –í–∞—à –±–∞–ª–∞–Ω—Å: {bal}"
    await update.message.reply_text(txt, reply_markup=make_main_kb(uid))

async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    ensure_user(uid)
    bal = get_balance(uid)
    phone = get_phone(uid)
    reg = "‚úÖ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–æ–¥–∞–Ω–æ" if phone else "‚ùå –Ω–µ–º–∞—î —Ç–µ–ª–µ—Ñ–æ–Ω—É"
    await update.message.reply_text(f"–ë–∞–ª–∞–Ω—Å: {bal} –∫—Ä–µ–¥–∏—Ç—ñ–≤\n{reg}", reply_markup=make_main_kb(uid))

async def topup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    ensure_user(uid)
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Å—É–º—É –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è:", reply_markup=topup_inline_kb())

async def backlinks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = update.message.text.split()[1:] if update.message.text else []
    if not args:
        return await update.message.reply_text("–ü—Ä–∏–∫–ª–∞–¥: /backlinks yourdomain.com –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å üîó Backlinks —ñ –≤–≤–µ–¥—ñ—Ç—å: `backlinks yourdomain.com`", parse_mode="Markdown")
    domain = args[0]
    await update.message.reply_text(
        f"–î–æ–º–µ–Ω: *{domain}*\n–û–±–µ—Ä–∏ –¥—ñ—é:\n"
        f"‚Ä¢ –ü–ª–∞—Ç–Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—è: {_uah_to_credits(BACKLINKS_PRICE_UAH)} –∫—Ä–µ–¥–∏—Ç(—ñ–≤) (~{BACKLINKS_PRICE_UAH:.2f}‚Ç¥)",
        reply_markup=backlinks_inline_kb(domain),
        parse_mode="Markdown"
    )

async def on_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    uid = update.effective_user.id
    data = (query.data or "").split("|")

    # –ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è LiqPay
    if data[0] == "topup":
        amount_uah = int(data[1])
        try:
            async with AsyncClient(timeout=20) as c:
                r = await c.post(
                    f"{BACKEND_BASE}/api/payments/create",
                    json={"user_id": uid, "amount_uah": amount_uah}
                )
                r.raise_for_status()
                resp = r.json()
        except ConnectError:
            return await query.edit_message_text("‚ùå –ë–µ–∫–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –ü–µ—Ä–µ–≤—ñ—Ä BACKEND_BASE —Ç–∞ —Å–µ—Ä–≤—ñ—Å payments_api.")
        except HTTPError as e:
            return await query.edit_message_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –±–µ–∫–µ–Ω–¥—É: {e.response.status_code}")
        # –æ—á—ñ–∫—É—î–º–æ {"checkout_url": "..."}
        url = resp.get("checkout_url") or resp.get("invoiceUrl") or resp.get("url")
        if not url:
            return await query.edit_message_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ–ø–ª–∞—Ç—É.")
        kb = [[InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏ (LiqPay)", url=url)]]
        return await query.edit_message_text(
            f"–†–∞—Ö—É–Ω–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ –Ω–∞ {amount_uah}‚Ç¥. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å, —â–æ–± –æ–ø–ª–∞—Ç–∏—Ç–∏:",
            reply_markup=InlineKeyboardMarkup(kb)
        )

    # –ü–ª–∞—Ç–Ω—ñ –¥—ñ—ó (–±–µ–∫–ª—ñ–Ω–∫–∏)
    try:
        action, domain, scope = data
    except ValueError:
        return await query.edit_message_text("–ù–µ–≤—ñ—Ä–Ω–∏–π –∑–∞–ø–∏—Ç.")

    # —Å–ø–∏—Å–∞–Ω–Ω—è –≤ –∫—Ä–µ–¥–∏—Ç–∞—Ö –∑ —Ü—ñ–Ω–∏ —É –≥—Ä–Ω
    cost_credits = _uah_to_credits(BACKLINKS_PRICE_UAH)
    if not charge(uid, cost_credits, domain, scope):
        # –Ω–µ–º–∞—î –∫–æ—à—Ç—ñ–≤ ‚Äî –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è
        return await query.edit_message_text(
            f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫—Ä–µ–¥–∏—Ç—ñ–≤ (–ø–æ—Ç—Ä—ñ–±–Ω–æ {cost_credits}). –û–±–µ—Ä—ñ—Ç—å —Å—É–º—É –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è:",
            reply_markup=topup_inline_kb()
        )

    # —è–∫—â–æ —Å–ø–∏—Å–∞–ª–∏ ‚Äî –≤–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –¥–æ DFS
    limit = 10 if scope == "10" else 1000
    try:
        data = await dfs.backlinks_live(domain, limit=limit, order_by="first_seen,desc")
        items = _extract_items(data)
        if not items:
            bal = get_balance(uid)
            return await query.edit_message_text(f"–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π—à–æ–≤ üòï\n–í–∞—à –Ω–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {bal} –∫—Ä–µ–¥–∏—Ç—ñ–≤")

        if action == "show":
            cap = 10 if scope == "10" else 50
            txt = _fmt_preview(items, cap)
            if scope == "all" and len(items) > cap:
                txt += f"\n\n‚Ä¶–ø–æ–∫–∞–∑–∞–Ω–æ –ø–µ—Ä—à—ñ {cap} –∑ {len(items)}."
            bal = get_balance(uid)
            txt += f"\n\nüíº –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {bal} –∫—Ä–µ–¥–∏—Ç—ñ–≤"
            await query.edit_message_text(txt)
        elif action == "csv":
            csv_bytes = _items_to_csv_bytes(items)
            bal = get_balance(uid)
            await query.message.reply_document(
                document=InputFile(io.BytesIO(csv_bytes), filename=f"{domain}_backlinks_{scope}.csv"),
                caption=f"–ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è {domain} ({'10' if scope=='10' else 'all'})\nüíº –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {bal} –∫—Ä–µ–¥–∏—Ç—ñ–≤"
            )
            await query.edit_message_text("–ì–æ—Ç–æ–≤–æ ‚úÖ")
        else:
            await query.edit_message_text("–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è.")
    except HTTPError as e:
        log.exception("HTTP error")
        await query.edit_message_text(f"DataForSEO HTTP error: {e}")
    except Exception as e:
        log.exception("Unexpected error")
        await query.edit_message_text(f"–ü–æ–º–∏–ª–∫–∞: {e}")

# ----------------- –ê–¥–º—ñ–Ω–∫–∞ (–ø—Ä–æ—Å—Ç–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç) -----------------
async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if not (ADMIN_ID and uid == ADMIN_ID):
        return await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
    await update.message.reply_text(
        "üõ† –ê–¥–º—ñ–Ω–∫–∞ (–º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –≤–µ—Ä—Å—ñ—è)\n"
        "‚Ä¢ –ù–∞–¥–∞–ª—ñ —Ç—É—Ç –±—É–¥–µ —Å–ø–∏—Å–æ–∫ —é–∑–µ—Ä—ñ–≤, –±–∞–ª–∞–Ω—Å–∏ —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∏.\n"
        "‚Ä¢ –ü–æ–∫–∏ —â–æ –¥–æ—Å—Ç—É–ø–Ω—ñ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –∫–æ–º–∞–Ω–¥–∏.\n",
        reply_markup=make_main_kb(uid)
    )

# =========================================================
#                      MAIN
# =========================================================
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("balance", balance))
    app.add_handler(CommandHandler("topup", topup))
    app.add_handler(CommandHandler("register", register))
    app.add_handler(CommandHandler("backlinks", backlinks))
    app.add_handler(CommandHandler("admin", admin))

    # –ö–æ–Ω—Ç–∞–∫—Ç/–Ω–æ–º–µ—Ä
    app.add_handler(MessageHandler(filters.CONTACT, on_contact))

    # –ö–Ω–æ–ø–∫–∏ inline (topup/backlinks actions)
    app.add_handler(CallbackQueryHandler(on_choice))

    # –û–±—Ä–æ–±–Ω–∏–∫ –º–µ–Ω—é –∑ –µ–º–æ–¥–∑—ñ —Ç–∞ –≤—ñ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu))

    log.info("Bot started. DFS_BASE=%s BACKEND_BASE=%s", DFS_BASE, BACKEND_BASE)
    app.run_polling(close_loop=False)

if __name__ == "__main__":
    main()
