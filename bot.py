import os
import logging
from dotenv import load_dotenv

from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton,
    ReplyKeyboardMarkup, ReplyKeyboardRemove, InputFile
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)

from httpx import AsyncClient

# ===== DAO =====
from dao import init_db, ensure_user, get_balance, charge, get_phone

load_dotenv()
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("mybot")

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")

# –í–Ω—É—Ç—Ä—ñ—à–Ω—ñ URL –¥–æ API (–ª–æ–∫–∞–ª—å–Ω—ñ)
PAY_API_BASE = os.getenv("PAY_API_BASE", "http://127.0.0.1:8001")

# –§—ñ—á–∞-—Ñ–ª–∞–≥ WayForPay (–¥–ª—è –∫–Ω–æ–ø–∫–∏)
WAYFORPAY_ENABLED = os.getenv("WAYFORPAY_ENABLED", "0") == "1"

# ===== UI HELPERS =====
AMOUNTS = [50, 100, 200, 500]

def amounts_kb() -> InlineKeyboardMarkup:
    rows = []
    row = []
    for i, a in enumerate(AMOUNTS, start=1):
        row.append(InlineKeyboardButton(f"{a} UAH", callback_data=f"amt_{a}"))
        if i % 2 == 0:
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="home")])
    return InlineKeyboardMarkup(rows)

def topup_methods_kb(amount: int) -> InlineKeyboardMarkup:
    rows = [[InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç–∏ LiqPay", callback_data=f"pay_liqpay_{amount}")]]
    if WAYFORPAY_ENABLED:
        rows.append([InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç–∏ WayForPay", callback_data=f"pay_wfp_{amount}")])
    rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="topup")])
    return InlineKeyboardMarkup(rows)

def home_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìä –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
        [InlineKeyboardButton("üí≥ –ü–æ–ø–æ–≤–Ω–∏—Ç–∏", callback_data="topup")]
    ])

# ===== HANDLERS =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    ensure_user(user.id, user.username or "", user.first_name or "", user.last_name or "")
    await update.message.reply_text(
        "–í—ñ—Ç–∞—é! –¶–µ –±–æ—Ç –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –∫—Ä–µ–¥–∏—Ç—ñ–≤.\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –Ω–∏–∂—á–µ:",
        reply_markup=home_kb()
    )

async def home_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    await q.edit_message_text("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=home_kb())

async def balance_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    bal = get_balance(update.effective_user.id)
    phone = get_phone(update.effective_user.id)
    await q.edit_message_text(
        f"üìä –ë–∞–ª–∞–Ω—Å: {bal} –∫—Ä–µ–¥–∏—Ç—ñ–≤\n–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: {'‚úÖ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–æ–¥–∞–Ω–æ' if phone else '‚ùå —Ç–µ–ª–µ—Ñ–æ–Ω—É –Ω–µ–º–∞—î'}",
        reply_markup=home_kb()
    )

async def topup_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    await q.edit_message_text("–û–±–µ—Ä—ñ—Ç—å —Å—É–º—É –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è:", reply_markup=amounts_kb())

async def on_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    amt = int(q.data.split("_")[1])
    await q.edit_message_text(
        f"–°—É–º–∞ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è: {amt} UAH\n–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:",
        reply_markup=topup_methods_kb(amt)
    )

# ---- LiqPay flow ----
async def pay_liqpay_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    amt = int(q.data.split("_")[-1])
    user_id = update.effective_user.id

    payload = {
        "user_id": user_id,
        "amount": amt,
        "currency": "UAH",
        "description": f"Top-up {amt} credits"
    }
    try:
        async with AsyncClient(timeout=20.0) as client:
            r = await client.post(f"{PAY_API_BASE}/api/payments/create", json=payload)
            r.raise_for_status()
            data = r.json()
            if not data.get("ok"):
                await q.edit_message_text("–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É (LiqPay).")
                return
            # LiqPay –ø–æ—Ç—Ä–µ–±—É—î data + signature ‚Äî –¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –Ω–∞ —Ñ–æ—Ä–º—É
            liqpay_form_url = "https://www.liqpay.ua/api/3/checkout"
            kb = InlineKeyboardMarkup([
                [InlineKeyboardButton("–í—ñ–¥–∫—Ä–∏—Ç–∏ –æ–ø–ª–∞—Ç—É LiqPay", url=liqpay_form_url)],
                [InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–∞–ª–∞–Ω—Å", callback_data="balance")],
            ])
            # –ö–æ—Ä–æ—Ç–∫–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è ‚Äî –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥–∫—Ä–∏—î —Ñ–æ—Ä–º—É —ñ –æ–ø–ª–∞—Ç–∏—Ç—å
            await q.edit_message_text(
                f"–°—É–º–∞: {amt} UAH\n–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –≤—ñ–¥–∫—Ä–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É –æ–ø–ª–∞—Ç–∏ LiqPay.\n"
                f"‚ö†Ô∏è –Ø–∫—â–æ –Ω–µ –≤—ñ–¥–∫—Ä–∏–≤–∞—î—Ç—å—Å—è ‚Äî —Å–∫–æ–ø—ñ—é–π –¥–∞–Ω—ñ –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –æ–ø–ª–∞—Ç–∏ –≤—Ä—É—á–Ω—É.",
                reply_markup=kb
            )
            # –î–æ–¥–∞—î–º–æ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –¥–∞–Ω—ñ –æ–∫—Ä–µ–º–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º (–Ω–∞ –≤–∏–ø–∞–¥–æ–∫ —Ä—É—á–Ω–æ–≥–æ –≤–Ω–µ—Å–µ–Ω–Ω—è)
            await q.message.reply_text(
                f"–î–ª—è LiqPay:\n"
                f"data: `{data['data']}`\n"
                f"signature: `{data['signature']}`",
                parse_mode="Markdown"
            )
    except Exception as e:
        await q.edit_message_text(f"–ü–æ–º–∏–ª–∫–∞ LiqPay: {e}")

# ---- WayForPay flow ----
async def pay_wfp_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    amt = int(q.data.split("_")[-1])
    user_id = update.effective_user.id

    payload = {
        "user_id": user_id,
        "amount": amt,
        "description": f"Top-up {amt} credits",
    }
    try:
        async with AsyncClient(timeout=20.0) as client:
            r = await client.post(f"{PAY_API_BASE}/api/payments/wayforpay/create", json=payload)
            r.raise_for_status()
            data = r.json()
            if not data.get("ok"):
                await q.edit_message_text("–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É (WayForPay).")
                return
            pay_url = data["url"]
    except Exception as e:
        await q.edit_message_text(f"–ü–æ–º–∏–ª–∫–∞ WayForPay: {e}")
        return

    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("–í—ñ–¥–∫—Ä–∏—Ç–∏ –æ–ø–ª–∞—Ç—É WayForPay", url=pay_url)],
        [InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–∞–ª–∞–Ω—Å", callback_data="balance")],
    ])
    await q.edit_message_text(
        f"–°—É–º–∞: {amt} UAH\n–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ WayForPay.",
        reply_markup=kb
    )

# ===== REGISTRATION (—Ç–µ–ª–µ—Ñ–æ–Ω) ‚Äî –æ–ø—Ü—ñ–π–Ω–æ, —è–∫—â–æ —Ç—Ä–µ–±–∞ =====
async def ask_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    btn = KeyboardButton("üì± –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä", request_contact=True)
    kb = ReplyKeyboardMarkup([[btn]], resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–î–ª—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –Ω–∞–¥—ñ—à–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:", reply_markup=kb)

async def on_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.contact
    if contact and contact.user_id == update.effective_user.id:
        # –ó–±–µ—Ä–µ–∂–∏ —É —Å–≤–æ—ó–π dao.set_phone(...)
        await update.message.reply_text("–î—è–∫—É—é! –¢–µ–ª–µ—Ñ–æ–Ω –∑–±–µ—Ä–µ–∂–µ–Ω–æ ‚úÖ", reply_markup=ReplyKeyboardRemove())
    else:
        await update.message.reply_text("–¶–µ –Ω–µ —Ç–≤—ñ–π –∫–æ–Ω—Ç–∞–∫—Ç ü§î –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.", reply_markup=ReplyKeyboardRemove())

# ===== MAIN =====
def main():
    init_db()
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("phone", ask_phone))
    app.add_handler(CallbackQueryHandler(home_cb, pattern="^home$"))
    app.add_handler(CallbackQueryHandler(balance_cb, pattern="^balance$"))
    app.add_handler(CallbackQueryHandler(topup_cb, pattern="^topup$"))
    app.add_handler(CallbackQueryHandler(on_amount, pattern=r"^amt_\d+$"))
    app.add_handler(CallbackQueryHandler(pay_liqpay_cb, pattern=r"^pay_liqpay_\d+$"))
    app.add_handler(CallbackQueryHandler(pay_wfp_cb, pattern=r"^pay_wfp_\d+$"))
    app.add_handler(MessageHandler(filters.CONTACT, on_contact))

    # fallback: —è–∫—â–æ —é–∑–µ—Ä –Ω–∞–ø–∏—à–µ "–ø–æ–ø–æ–≤–Ω–∏—Ç–∏"
    app.add_handler(MessageHandler(filters.Regex(r"(?i)–ø–æ–ø–æ–≤–Ω–∏—Ç–∏|topup"), lambda u,c: u.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Å—É–º—É:", reply_markup=amounts_kb())))
    app.add_handler(MessageHandler(filters.COMMAND | filters.TEXT, lambda u,c: u.message.reply_text("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=home_kb())))

    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
