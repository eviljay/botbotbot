# bot.py
import os
import logging
import httpx
from dotenv import load_dotenv

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)

# ---------- Config & logging ----------
load_dotenv()
TELEGRAM_TOKEN = os.environ["TELEGRAM_BOT_TOKEN"]
BACKEND_BASE = os.getenv("BACKEND_BASE", "http://127.0.0.1:8001").rstrip("/")

logging.basicConfig(
    level=os.getenv("LOGLEVEL", "INFO"),
    format="%(asctime)s %(levelname)s:%(name)s:%(message)s",
)
logger = logging.getLogger(__name__)
logger.info("Bot starting. BACKEND_BASE=%s", BACKEND_BASE)


# ---------- Handlers ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "–ü—Ä–∏–≤—ñ—Ç! –¢—É—Ç –º–æ–∂–Ω–∞ –ø–æ–ø–æ–≤–Ω–∏—Ç–∏ –∫—Ä–µ–¥–∏—Ç–∏.\n"
        "–û–±–µ—Ä–∏ –ø–∞–∫–µ—Ç –Ω–∏–∂—á–µ üëá"
    )
    kb = InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("100 –∫—Ä–µ–¥–∏—Ç—ñ–≤ ‚Äî 99 UAH", callback_data="buy:99:100 –∫—Ä–µ–¥–∏—Ç—ñ–≤")],
            [InlineKeyboardButton("220 –∫—Ä–µ–¥–∏—Ç—ñ–≤ ‚Äî 199 UAH", callback_data="buy:199:220 –∫—Ä–µ–¥–∏—Ç—ñ–≤")],
        ]
    )
    if update.message:
        await update.message.reply_text(text, reply_markup=kb)
    else:
        # –Ω–∞ –≤–∏–ø–∞–¥–æ–∫, —è–∫—â–æ –ø—Ä–∏–π—à–ª–æ —è–∫ callback –∞–±–æ —ñ–Ω—à–∏–π –∞–ø–¥–µ–π—Ç
        await update.effective_chat.send_message(text, reply_markup=kb)


async def buy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /buy (—Ç–µ —Å–∞–º–µ –º–µ–Ω—é)
    await start(update, context)


async def on_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()  # –º–∏—Ç—Ç—î–≤–∏–π —Ñ—ñ–¥–±–µ–∫ Telegram (–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)
    data = (q.data or "")
    logger.info("on_choice: %s", data)

    if not data.startswith("buy:"):
        await q.message.reply_text("–ù–µ –≤–ø—ñ–∑–Ω–∞–≤ –¥—ñ—é –∫–Ω–æ–ø–∫–∏ ü§î")
        return

    try:
        # —Ñ–æ—Ä–º–∞—Ç: buy:<amount>:<description>
        _, amount_str, description = data.split(":", 2)
        payload = {
            "user_id": q.from_user.id,    # int
            "amount": amount_str,         # –¥–æ–∑–≤–æ–ª–∏–º–æ —Ä—è–¥–æ–∫, –±–µ–∫–µ–Ω–¥ –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç—å
            "description": description,
        }

        url = f"{BACKEND_BASE}/api/payments/create"
        logger.info("POST %s payload=%s", url, payload)

        async with httpx.AsyncClient(timeout=10) as client:
            r = await client.post(url, json=payload)

        if r.status_code != 200:
            logger.error("Backend %s: %s", r.status_code, r.text)
            await q.message.reply_text("–ë–µ–∫–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –∞–±–æ –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ–º–∏–ª–∫—É. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.")
            return

        resp = r.json()
        checkout_url = resp.get("checkout_url")
        if not checkout_url:
            logger.error("No checkout_url in response: %s", resp)
            await q.message.reply_text("–ù–µ –æ—Ç—Ä–∏–º–∞–≤ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ–ø–ª–∞—Ç—É üòï")
            return

        kb = InlineKeyboardMarkup(
            [[InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç–∏ —á–µ—Ä–µ–∑ LiqPay", url=checkout_url)]]
        )
        await q.message.reply_text(f"–°—É–º–∞: {amount_str} UAH\n{description}", reply_markup=kb)

    except Exception as e:
        logger.exception("on_choice error")
        await q.message.reply_text("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")


async def on_error(update: object, context: ContextTypes.DEFAULT_TYPE):
    # –Ω–µ –ø–∞–¥–∞—î–º–æ –Ω–∞ –≤–∏–Ω—è—Ç–∫–∞—Ö ‚Äî –ø—Ä–æ—Å—Ç–æ –ª–æ–≥ —ñ —Ç–∏—Ö–∏–π —Ñ–µ–π–ª
    logger.exception("Unhandled error: %s", context.error)


# ---------- App ----------
def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    # –∫–æ–º–∞–Ω–¥–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("buy", buy))

    # –æ–±—Ä–æ–±–∫–∞ –∫–ª—ñ–∫—É –ø–æ –∫–Ω–æ–ø—Ü—ñ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è
    app.add_handler(CallbackQueryHandler(on_choice, pattern=r"^buy:"))

    # error handler
    app.add_error_handler(on_error)

    logger.info("Application started")
    app.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()
