# bot.py
import os
import io
import re
import csv
import math
import logging
import sqlite3
from typing import List, Optional

from dotenv import load_dotenv
from httpx import AsyncClient, ConnectError, HTTPError

from telegram import (
    Update,
    InputFile,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    KeyboardButton,
    ReplyKeyboardMarkup,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

# ====== –õ–æ–∫–∞–ª—å–Ω—ñ –º–æ–¥—É–ª—ñ ======
from dao import init_db, ensure_user, get_balance, charge, get_phone, register_or_update_phone
from dataforseo import DataForSEO

# ====== –õ–æ–≥–∏ ======
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(name)s: %(message)s")
log = logging.getLogger("bot")

# ====== ENV ======
load_dotenv()
TELEGRAM_BOT_URL     = os.getenv("TELEGRAM_BOT_URL", "")        # –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: https://t.me/YourBotName
TELEGRAM_START_PARAM = os.getenv("TELEGRAM_START_PARAM", "paid") # –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ

TELEGRAM_TOKEN = os.environ["TELEGRAM_BOT_TOKEN"]
DFS_LOGIN = os.environ["DATAFORSEO_LOGIN"]
DFS_PASS = os.environ["DATAFORSEO_PASSWORD"]
DFS_BASE = os.getenv("DATAFORSEO_BASE", "https://api.dataforseo.com")

# –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –±–µ–∫–µ–Ω–¥ (–ª–æ–∫–∞–ª—å–Ω–∏–π API)
BACKEND_BASE = os.getenv("BACKEND_BASE", "http://127.0.0.1:8001").rstrip("/")
# –ø—É–±–ª—ñ—á–Ω–∏–π –¥–æ–º–µ–Ω (–Ω–∞ –≤–∏–ø–∞–¥–æ–∫, —è–∫—â–æ –∫–æ–ª–∏—Å—å –¥–æ–≤–µ–¥–µ—Ç—å—Å—è –¥–∞—Ç–∏ /pay/{order_id})
PUBLIC_BASE  = os.getenv("PUBLIC_BASE", "https://server1.seoswiss.online").rstrip("/")

CREDIT_PRICE_UAH = float(os.getenv("CREDIT_PRICE_UAH", "5"))
BACKLINKS_CHARGE_UAH = float(os.getenv("BACKLINKS_CHARGE_UAH", "5"))
INITIAL_BONUS = int(os.getenv("INITIAL_BONUS", "10"))
TOPUP_OPTIONS = [int(x.strip()) for x in os.getenv("TOPUP_OPTIONS", "100,250,500").split(",") if x.strip().isdigit()]
# ====== PRICING FOR TOOLS ======
RESEARCH_CHARGE_UAH = float(os.getenv("RESEARCH_CHARGE_UAH", "5"))
SERP_CHARGE_UAH     = float(os.getenv("SERP_CHARGE_UAH", "5"))
GAP_CHARGE_UAH      = float(os.getenv("GAP_CHARGE_UAH", "5"))



# –¥–ª—è –∞–¥–º—ñ–Ω–∫–∏
ADMIN_IDS = {int(x) for x in os.getenv("ADMIN_IDS", "").replace(" ", "").split(",") if x.isdigit()}
DB_PATH = os.getenv("DB_PATH", "bot.db")  # –æ—á—ñ–∫—É–≤–∞–Ω–∞ –ë–î, —è–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î dao.py

PREVIEW_COUNT = 10
CSV_MAX = 1000
PAGE_SIZE = 20
WAIT_PHONE = 10

# ====== INIT ======
init_db()
dfs = DataForSEO(DFS_LOGIN, DFS_PASS, DFS_BASE)

# ====== –£—Ç–∏–ª—ñ—Ç–∏ ======
def main_menu_keyboard(registered: bool) -> ReplyKeyboardMarkup:
    # –ö–æ—Ä–æ—Ç–∫–µ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é: –¢—É–ª–∏ / –ë–∞–ª–∞–Ω—Å / –ü–æ–ø–æ–≤–Ω–∏—Ç–∏ (+ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —è–∫—â–æ —Ç—Ä–µ–±–∞)
    rows = [
        [KeyboardButton("üß∞ –¢—É–ª–∏"), KeyboardButton("üìä –ë–∞–ª–∞–Ω—Å")],
        [KeyboardButton("üí≥ –ü–æ–ø–æ–≤–Ω–∏—Ç–∏")]
    ]
    if not registered:
        rows.append([KeyboardButton("üì± –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è")])
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

def tools_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîé Research", callback_data="tool|research")],
        [InlineKeyboardButton("üìä SERP Checker", callback_data="tool|serp")],
        [InlineKeyboardButton("üÜö Keyword Gap", callback_data="tool|gap")],
        [InlineKeyboardButton("üîó Backlinks", callback_data="tool|backlinks")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="tools|back")]
    ])


async def open_tools_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üß∞ *–ú–µ–Ω—é —Ç—É–ª—ñ–≤*\n\n"
        "–û–±–µ—Ä—ñ—Ç—å —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:\n"
        "‚Ä¢ üîé Research ‚Äî –ø—ñ–¥–±—ñ—Ä –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤\n"
        "‚Ä¢ üìä SERP Checker ‚Äî —Ç–æ–ø –≤–∏–¥–∞—á—ñ –ø–æ –∫–ª—é—á—É\n"
        "‚Ä¢ üÜö Keyword Gap ‚Äî –∫–ª—é—á—ñ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ–≤, —è–∫–∏—Ö —É –≤–∞—Å –Ω–µ–º–∞\n"
        "‚Ä¢ üîó Backlinks ‚Äî —Ä–æ–±–æ—Ç–∞ –∑ –±–µ–∫–ª—ñ–Ω–∫–∞–º–∏"
    )
    if update.message:
        await update.message.reply_text(text, reply_markup=tools_menu_kb(), parse_mode="Markdown")
    else:
        await update.callback_query.edit_message_text(text, reply_markup=tools_menu_kb(), parse_mode="Markdown")


def _extract_items(resp: dict) -> List[dict]:
    tasks = resp.get("tasks") or []
    if not tasks:
        return []
    t = tasks[0] or {}
    if t.get("status_code") and t["status_code"] != 20000:
        raise RuntimeError(t.get("status_message") or f"Task error: {t.get('status_code')}")
    res = t.get("result") or []
    if not res:
        return []
    return res[0].get("items") or []

def _fmt_preview(items: List[dict], cap: int) -> str:
    lines = []
    for it in items[:cap]:
        url_from = (it.get("page_from") or {}).get("url_from") or it.get("url_from")
        anchor = (it.get("anchor") or "").strip()
        first_seen = it.get("first_seen")
        lines.append(f"‚Ä¢ {url_from}\n  anchor: {anchor[:80]} | first_seen: {first_seen}")
    return "\n".join(lines)

def _items_to_csv_bytes(items: List[dict]) -> bytes:
    buf = io.StringIO()
    w = csv.writer(buf)
    w.writerow(["url_from", "url_to", "anchor", "dofollow", "first_seen", "last_seen", "domain_from"])
    for it in items:
        w.writerow([
            (it.get("page_from") or {}).get("url_from") or it.get("url_from"),
            it.get("url_to"),
            (it.get("anchor") or "").replace("\n", " ").strip(),
            it.get("dofollow"),
            it.get("first_seen"),
            it.get("last_visited"),
            it.get("domain_from")
        ])
    return buf.getvalue().encode()

def _uah_to_credits(amount_uah: float) -> int:
    return max(1, math.ceil(amount_uah / CREDIT_PRICE_UAH))

def _registered(uid: int) -> bool:
    return bool(get_phone(uid))

def _provider_label(provider: str) -> str:
    return "LiqPay" if provider == "liqpay" else ("WayForPay" if provider in ("wayforpay", "wfp") else provider)

# ====== –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ ======
def _build_topup_amounts_kb(provider: str) -> InlineKeyboardMarkup:
    rows = []
    for amount in TOPUP_OPTIONS:
        credits = int(amount // CREDIT_PRICE_UAH)
        rows.append([
            InlineKeyboardButton(
                f"üí≥ –ü–æ–ø–æ–≤–Ω–∏—Ç–∏ {amount}‚Ç¥ (~{credits} –∫—Ä–µ–¥–∏—Ç—ñ–≤)",
                callback_data=f"topup|{provider}|{amount}"
            )
        ])
    rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="topup_providers")])
    return InlineKeyboardMarkup(rows)

def _providers_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üí≥ LiqPay", callback_data="open_amounts|liqpay")],
        [InlineKeyboardButton("üè¶ WayForPay", callback_data="open_amounts|wayforpay")],
        [InlineKeyboardButton("üßæ Portmone (—Å–∫–æ—Ä–æ)", callback_data="provider_soon|portmone")],
    ])

# ====== /start ======
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    ensure_user(uid)
    bal = get_balance(uid)
    reg = _registered(uid)
    reg_text = "‚úÖ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–æ–¥–∞–Ω–æ" if reg else "‚ùå –Ω–µ–º–∞—î —Ç–µ–ª–µ—Ñ–æ–Ω—É (–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è)"

    # Deep-link /start <param>
    raw = (update.message.text or "").strip()
    param: Optional[str] = None
    if raw.startswith("/start"):
        parts = raw.split(maxsplit=1)
        if len(parts) == 2:
            param = parts[1].strip()

    if param == TELEGRAM_START_PARAM:
        # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑ –æ–ø–ª–∞—Ç–∏
        await update.message.reply_text(
            "–î—è–∫—É—î–º–æ! –Ø–∫—â–æ –ø–ª–∞—Ç—ñ–∂ –ø—Ä–æ–π—à–æ–≤, –±–∞–ª–∞–Ω—Å –æ–Ω–æ–≤–∏—Ç—å—Å—è –ø—Ä–æ—Ç—è–≥–æ–º —Ö–≤–∏–ª–∏–Ω–∏.\n"
            "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ /balance –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´üìä –ë–∞–ª–∞–Ω—Å¬ª.",
            reply_markup=main_menu_keyboard(reg)
        )
        return

    text = (
        "–ü—Ä–∏–≤—ñ—Ç! –Ø SEO-–±–æ—Ç –∑ –±–∞–ª–∞–Ω—Å–æ–º.\n\n"
        "–ö–æ–º–∞–Ω–¥–∏/–º–µ–Ω—é:\n"
        "üîó Backlinks ‚Äî –æ—Ç—Ä–∏–º–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ –∞–±–æ –≤—Å—ñ –±–µ–∫–ª—ñ–Ω–∫–∏ –π CSV\n"
        "üí≥ –ü–æ–ø–æ–≤–Ω–∏—Ç–∏ ‚Äî –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ LiqPay –∞–±–æ WayForPay\n"
        "üìä –ë–∞–ª–∞–Ω—Å ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –≤–∞—à –±–∞–ª–∞–Ω—Å\n"
        "üì± –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è ‚Äî –¥–æ–¥–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω (–Ω–æ–≤–∏–º ‚Äî –±–æ–Ω—É—Å)\n\n"
        f"–°—Ç–∞—Ç—É—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {reg_text}\n"
        f"–í–∞—à –±–∞–ª–∞–Ω—Å: {bal} –∫—Ä–µ–¥–∏—Ç—ñ–≤"
    )
    await update.message.reply_text(text, reply_markup=main_menu_keyboard(reg))

# ====== –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è ======
def _normalize_phone(p: str) -> str:
    digits = "".join(ch for ch in p if ch.isdigit())
    return ("+" + digits) if digits and not p.strip().startswith("+") else (p if p.startswith("+") else "+" + digits)

async def register_cmd_or_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    ensure_user(uid)

    if _registered(uid):
        return await update.message.reply_text("–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ ‚úÖ", reply_markup=main_menu_keyboard(True))

    kb = [[KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]]
    await update.message.reply_text(
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É, —â–æ–± –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è **—Å–≤–æ—ó–º** –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É:",
        reply_markup=ReplyKeyboardMarkup(kb, one_time_keyboard=True, resize_keyboard=True)
    )
    return WAIT_PHONE

async def on_contact_register(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    contact = update.message.contact
    if not contact or (contact.user_id and contact.user_id != uid):
        kb = [[KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]]
        await update.message.reply_text(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è **–≤–ª–∞—Å–Ω–∏–º** –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.",
            reply_markup=ReplyKeyboardMarkup(kb, one_time_keyboard=True, resize_keyboard=True),
        )
        return WAIT_PHONE

    phone_norm = _normalize_phone(contact.phone_number or "")
    is_new, credited = register_or_update_phone(uid, phone_norm, initial_bonus=INITIAL_BONUS)
    bal = get_balance(uid)

    if is_new and credited > 0:
        msg = f"‚úÖ –î—è–∫—É—î–º–æ –∑–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é!\n–ù–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ –±–æ–Ω—É—Å: +{credited} –∫—Ä–µ–¥–∏—Ç—ñ–≤.\n–í–∞—à –±–∞–ª–∞–Ω—Å: {bal}"
    else:
        msg = f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –∑–±–µ—Ä–µ–∂–µ–Ω–æ.\n–í–∞—à –±–∞–ª–∞–Ω—Å: {bal}"

    await update.message.reply_text(msg, reply_markup=main_menu_keyboard(True))
    return ConversationHandler.END

async def cancel_register(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_menu_keyboard(_registered(update.effective_user.id)))
    return ConversationHandler.END

# ====== –ë–∞–ª–∞–Ω—Å ======
async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    ensure_user(uid)
    bal = get_balance(uid)
    reg_text = "‚úÖ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–æ–¥–∞–Ω–æ" if _registered(uid) else "‚ùå –Ω–µ–º–∞—î —Ç–µ–ª–µ—Ñ–æ–Ω—É (–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è)"
    await update.message.reply_text(f"–ë–∞–ª–∞–Ω—Å: {bal} –∫—Ä–µ–¥–∏—Ç—ñ–≤\n–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: {reg_text}")

# ====== –ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è: –≤–∏–±—ñ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ ======
async def topup_providers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = _providers_kb()
    text = (
        "üí∞ *–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É*\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –æ–ø–ª–∞—Ç–∏."
    )
    if update.message:
        await update.message.reply_text(text, reply_markup=kb, parse_mode="Markdown")
    else:
        await update.callback_query.edit_message_text(text, reply_markup=kb, parse_mode="Markdown")

# ====== –ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è: –≤–∏–±—ñ—Ä —Å—É–º–∏ (–¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞) ======
async def open_amounts(update: Update, context: ContextTypes.DEFAULT_TYPE, provider: str):
    label = _provider_label(provider)
    msg = f"–û–±–µ—Ä—ñ—Ç—å —Å—É–º—É –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è ({label}):"
    kb = _build_topup_amounts_kb(provider)
    if update.message:
        await update.message.reply_text(msg, reply_markup=kb)
    else:
        await update.callback_query.edit_message_text(msg, reply_markup=kb)

# ====== Backlinks ======
async def backlinks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = update.message.text.split()[1:]
    if not args:
        return await update.message.reply_text("–ü—Ä–∏–∫–ª–∞–¥: `/backlinks yourdomain.com`", parse_mode="Markdown")
    domain = args[0].strip()

    kb = [
        [
            InlineKeyboardButton("üëÄ –ü–æ–∫–∞–∑–∞—Ç–∏ 10 (5‚Ç¥)", callback_data=f"show|{domain}|10"),
            InlineKeyboardButton("‚¨áÔ∏è CSV 10 (5‚Ç¥)", callback_data=f"csv|{domain}|10"),
        ],
        [
            InlineKeyboardButton("üëÄ –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ (5‚Ç¥)", callback_data=f"show|{domain}|all"),
            InlineKeyboardButton("‚¨áÔ∏è CSV –≤—Å—ñ (5‚Ç¥)", callback_data=f"csv|{domain}|all"),
        ],
    ]
    await update.message.reply_text(
        f"–î–æ–º–µ–Ω: *{domain}*\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é (–∑ –∫–æ–∂–Ω–æ—ó –¥—ñ—ó –±—É–¥–µ —Å–ø–∏—Å–∞–Ω–æ 5‚Ç¥):",
        reply_markup=InlineKeyboardMarkup(kb),
        parse_mode="Markdown",
    )
async def on_tool_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    ensure_user(uid)
    awaiting = context.user_data.get("await_tool")
    if not awaiting:
        return  # –Ω–µ –Ω–∞—à –∫–µ–π—Å

    text = (update.message.text or "").strip()
    try:
        if awaiting == "research":
            # —Ä–æ–∑–±—ñ—Ä "seed, cc"
            if "," in text:
                seed, cc = [x.strip() for x in text.split(",", 1)]
            else:
                seed, cc = text, "us"
            need_credits = _uah_to_credits(RESEARCH_CHARGE_UAH)
            if not charge(uid, need_credits, "research", seed):
                return await update.message.reply_text(
                    f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫—Ä–µ–¥–∏—Ç—ñ–≤ (–ø–æ—Ç—Ä—ñ–±–Ω–æ {need_credits}). –°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å ¬´üí≥ –ü–æ–ø–æ–≤–Ω–∏—Ç–∏¬ª.")
            # –≤–∏–∫–ª–∏–∫ DFS
            data_resp = await dfs.keyword_suggestions(seed, cc.lower())
            items = _extract_items(data_resp) or []
            # –∫–æ—Ä–æ—Ç–∫–∏–π –≤–∏–≤—ñ–¥
            preview = []
            for it in items[:10]:
                kw = it.get("keyword") or it.get("text") or ""
                vol = it.get("search_volume") or it.get("avg_monthly_searches")
                preview.append(f"‚Ä¢ {kw} ‚Äî vol: {vol}")
            bal_now = get_balance(uid)
            msg = "–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ." if not preview else "\n".join(preview)
            return await update.message.reply_text(f"{msg}\n\nüí∞ –°–ø–∏—Å–∞–Ω–æ {need_credits}. –ë–∞–ª–∞–Ω—Å: {bal_now}")

        if awaiting == "serp":
            if "," in text:
                kw, cc = [x.strip() for x in text.split(",", 1)]
            else:
                kw, cc = text, "us"
            need_credits = _uah_to_credits(SERP_CHARGE_UAH)
            if not charge(uid, need_credits, "serp", kw):
                return await update.message.reply_text(
                    f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫—Ä–µ–¥–∏—Ç—ñ–≤ (–ø–æ—Ç—Ä—ñ–±–Ω–æ {need_credits}). –°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å ¬´üí≥ –ü–æ–ø–æ–≤–Ω–∏—Ç–∏¬ª.")
            data_resp = await dfs.serp_organic(kw, cc.lower(), limit=10)
            items = _extract_items(data_resp) or []
            lines = []
            for i, it in enumerate(items[:10], 1):
                url = it.get("url") or it.get("result_url") or it.get("domain")
                title = (it.get("title") or "").strip()
                lines.append(f"{i}. {title[:70]} ‚Äî {url}")
            bal_now = get_balance(uid)
            msg = "–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ." if not lines else "\n".join(lines)
            return await update.message.reply_text(f"{msg}\n\nüí∞ –°–ø–∏—Å–∞–Ω–æ {need_credits}. –ë–∞–ª–∞–Ω—Å: {bal_now}")

        if awaiting == "gap":
            # —Ñ–æ—Ä–º–∞—Ç: my.com vs c1.com, c2.com
            if " vs " not in text.lower():
                return await update.message.reply_text(
                    "–§–æ—Ä–º–∞—Ç: `yourdomain.com vs competitor1.com, competitor2.com`", parse_mode="Markdown")
            left, right = text.split(" vs ", 1)
            your = left.strip()
            comps = [c.strip().strip(",") for c in right.split(",") if c.strip()]
            if not your or not comps:
                return await update.message.reply_text("–í–∫–∞–∂—ñ—Ç—å –¥–æ–º–µ–Ω —Ç–∞ —â–æ–Ω–∞–π–º–µ–Ω—à–µ 1 –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞.")
            need_credits = _uah_to_credits(GAP_CHARGE_UAH)
            if not charge(uid, need_credits, "gap", f"{your} vs {','.join(comps)}"):
                return await update.message.reply_text(
                    f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫—Ä–µ–¥–∏—Ç—ñ–≤ (–ø–æ—Ç—Ä—ñ–±–Ω–æ {need_credits}). –°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å ¬´üí≥ –ü–æ–ø–æ–≤–Ω–∏—Ç–∏¬ª.")
            data_resp = await dfs.keyword_gap(your, comps, limit=20)
            # –æ—á—ñ–∫—É—î–º–æ –º–∞—Å–∏–≤ –∫–ª—é—á—ñ–≤, —è–∫–∏—Ö –Ω–µ–º–∞ —É your, –∞–ª–µ —î —É –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ–≤
            items = _extract_items(data_resp) or []
            lines = []
            for it in items[:20]:
                kw = it.get("keyword") or it.get("text") or ""
                vol = it.get("search_volume") or it.get("avg_monthly_searches")
                who = ", ".join(it.get("owners", [])) if isinstance(it.get("owners"), list) else ""
                lines.append(f"‚Ä¢ {kw} ‚Äî vol: {vol} ‚Äî —É: {who}")
            bal_now = get_balance(uid)
            msg = "–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ." if not lines else "\n".join(lines)
            return await update.message.reply_text(f"{msg}\n\nüí∞ –°–ø–∏—Å–∞–Ω–æ {need_credits}. –ë–∞–ª–∞–Ω—Å: {bal_now}")

    except HTTPError as e:
        return await update.message.reply_text(f"DataForSEO HTTP error: {e}")
    except Exception as e:
        log.exception("tool error")
        return await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞: {e}")
    finally:
        # –æ—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
        context.user_data.pop("await_tool", None)



    # –í—ñ–¥–∫—Ä–∏—Ç–∏ –º–µ–Ω—é —Ç—É–ª—ñ–≤
    app.add_handler(MessageHandler(filters.Regex(r"^üß∞ –¢—É–ª–∏$"), open_tools_menu))

    # –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥—É –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É —Ç—É–ª—É
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_tool_input))



# ====== CALLBACKS (topup & backlinks) ======
async def on_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    uid = update.effective_user.id
    raw = (query.data or "").strip()
    log.info("CB <- %s", raw)

    parts = raw.split("|")
    if not parts:
        try:
            return await query.edit_message_text("–ö–Ω–æ–ø–∫–∞ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∞. –í—ñ–¥–∫—Ä–∏–π—Ç–µ –º–µ–Ω—é —â–µ —Ä–∞–∑.")
        except Exception:
            return

    cmd = parts[0]

    # --- –ï–∫—Ä–∞–Ω –≤–∏–±–æ—Ä—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ / –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞–∑–∞–¥ ---
    if cmd == "topup_providers":
        return await topup_providers(update, context)

    # --- –í—ñ–¥–∫—Ä–∏—Ç–∏ –≤–∏–±—ñ—Ä —Å—É–º –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ ---
    if cmd == "open_amounts":
        provider = (parts[1] if len(parts) > 1 else "liqpay").lower()
        return await open_amounts(update, context, provider)

    # --- –©–µ –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω—ñ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∏ ---
    if cmd == "provider_soon":
        label = _provider_label(parts[1] if len(parts) > 1 else "")
        return await query.answer(f"{label} —â–µ –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ", show_alert=False)



        # --- –ú–µ–Ω—é —Ç—É–ª—ñ–≤ (inline) ---
    if cmd == "tools" and len(parts) > 1 and parts[1] == "back":
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é (–ø—Ä–æ—Å—Ç–æ –∑–∞–º—ñ–Ω–∏–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)
        reg = _registered(uid)
        try:
            await query.edit_message_text("–ü–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –Ω–∏–∂—á–µ.")
        except Exception:
            pass
        await context.bot.send_message(chat_id=uid, text="–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard(reg))
        return

    if cmd == "tool":
        tool = parts[1] if len(parts) > 1 else ""
        # –ú–∞—Ä–∫—É—î–º–æ, —â–æ —á–µ–∫–∞—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        if tool == "research":
            context.user_data["await_tool"] = "research"
            return await query.edit_message_text(
                "üîé *Research*\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –∑–∞–ø–∏—Ç —É —Ñ–æ—Ä–º–∞—Ç—ñ: `seed_keyword, country_code`\n"
                "–ù–∞–ø—Ä.: `coffee, us` –∞–±–æ `seo audit, ua`",
                parse_mode="Markdown"
            )
        if tool == "serp":
            context.user_data["await_tool"] = "serp"
            return await query.edit_message_text(
                "üìä *SERP Checker*\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –∑–∞–ø–∏—Ç —É —Ñ–æ—Ä–º–∞—Ç—ñ: `keyword, country_code`\n"
                "–ù–∞–ø—Ä.: `best vpn, us` –∞–±–æ `–∫—É–ø–∏—Ç–∏ –Ω–æ—É—Ç–±—É–∫, ua`",
                parse_mode="Markdown"
            )
        if tool == "gap":
            context.user_data["await_tool"] = "gap"
            return await query.edit_message_text(
                "üÜö *Keyword Gap*\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –∑–∞–ø–∏—Ç —É —Ñ–æ—Ä–º–∞—Ç—ñ: `yourdomain.com vs competitor1.com, competitor2.com`\n"
                "–•–æ—á–∞ –± 1 –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç. –ù–∞–ø—Ä.: `mysite.com vs site1.com, site2.com`",
                parse_mode="Markdown"
            )
        if tool == "backlinks":
            context.user_data.pop("await_tool", None)
            return await query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É: `/backlinks yourdomain.com`", parse_mode="Markdown")







    # --- –ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è (—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–≤–æ–π—Å—É) ---
    if cmd == "topup":
        provider = (parts[1] if len(parts) > 1 else "liqpay").lower()
        amount_raw = parts[2] if len(parts) > 2 else ""
        # –¥–æ–∑–≤–æ–ª—è—î–º–æ ¬´–±—Ä—É–¥–Ω—ñ¬ª –∑–Ω–∞—á–µ–Ω–Ω—è:  "100‚Ç¥", "100.0", "100 –≥—Ä–Ω"
        amount_clean = re.sub(r"[^\d.]", "", str(amount_raw))
        try:
            amount_uah = int(float(amount_clean))
            if amount_uah <= 0:
                raise ValueError
        except Exception:
            try:
                return await query.edit_message_text("–ù–µ–≤—ñ—Ä–Ω–∞ —Å—É–º–∞. –û–±–µ—Ä—ñ—Ç—å —ó—ó –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ ¬´üí≥ –ü–æ–ø–æ–≤–Ω–∏—Ç–∏¬ª.")
            except Exception:
                return

        # —Å—Ç—É–∫–∞—î–º–æ—Å—å —É –Ω–∞—à –±–µ–∫–µ–Ω–¥
        try:
            async with AsyncClient(timeout=20) as c:
                r = await c.post(
                    f"{BACKEND_BASE}/api/payments/create",
                    json={"user_id": uid, "amount": amount_uah, "provider": provider}
                )
                r.raise_for_status()
                resp = r.json()
                log.info("payments.create resp: %s", resp)
        except ConnectError:
            return await query.edit_message_text(
                f"‚ùå –ë–µ–∫–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π ({BACKEND_BASE}). –ü–µ—Ä–µ–≤—ñ—Ä API/–ø–æ—Ä—Ç."
            )
        except HTTPError as e:
            body = getattr(e.response, "text", "")[:400]
            return await query.edit_message_text(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É: {e}\n{body}")

        pay_url = resp.get("pay_url") or resp.get("invoiceUrl")
        order_id = resp.get("order_id")

        if not pay_url and resp.get("data") and resp.get("signature"):
            pay_url = f"https://www.liqpay.ua/api/3/checkout?data={resp['data']}&signature={resp['signature']}"

        if not pay_url and order_id:
            pay_url = f"{PUBLIC_BASE}/pay/{order_id}"

        if not pay_url:
            preview = (str(resp)[:400]).replace("\n", " ")
            log.error("No pay_url returned. Resp=%s", resp)
            return await query.edit_message_text(
                "–ù–µ –æ—Ç—Ä–∏–º–∞–≤ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ–ø–ª–∞—Ç—É. "
                f"–í—ñ–¥–ø–æ–≤—ñ–¥—å –±–µ–∫–µ–Ω–¥—É: {preview}"
            )

        label = _provider_label(provider)
        kb = InlineKeyboardMarkup([[InlineKeyboardButton(f"üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏ ({label})", url=pay_url)]])
        # –æ–∫—Ä–µ–º–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º —ñ–∑ –∫–Ω–æ–ø–∫–æ—é
        await context.bot.send_message(
            chat_id=uid,
            text=(f"–†–∞—Ö—É–Ω–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ –Ω–∞ {amount_uah}‚Ç¥ ({label}).\n"
                  f"–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –∞–±–æ –≤—ñ–¥–∫—Ä–∏–π—Ç–µ –ª—ñ–Ω–∫:\n{pay_url}"),
            reply_markup=kb
        )
        # —ñ –ø—Ä–∏–±–∏—Ä–∞—î–º–æ —Å—Ç–∞—Ä–µ –º–µ–Ω—é/–ø–æ—è—Å–Ω—é—î–º–æ
        try:
            await query.edit_message_text("–†–∞—Ö—É–Ω–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ, –¥–∏–≤–∏—Å—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–æ—é –Ω–∏–∂—á–µ ‚¨áÔ∏è")
        except Exception:
            pass
        return

    # --- –ü–ª–∞—Ç–Ω—ñ –¥—ñ—ó (backlinks) ---
    if cmd in ("show", "csv") and len(parts) == 3:
        _, domain, scope = parts
        need_credits = _uah_to_credits(BACKLINKS_CHARGE_UAH)

        if not charge(uid, need_credits, domain, scope):
            rows = []
            for amount in TOPUP_OPTIONS:
                credits = int(amount // CREDIT_PRICE_UAH)
                rows.append([InlineKeyboardButton(
                    f"üí≥ –ü–æ–ø–æ–≤–Ω–∏—Ç–∏ {amount}‚Ç¥ (~{credits} –∫—Ä–µ–¥–∏—Ç—ñ–≤)",
                    callback_data="open_amounts|liqpay"
                )])
            return await query.edit_message_text(
                f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫—Ä–µ–¥–∏—Ç—ñ–≤ (–ø–æ—Ç—Ä—ñ–±–Ω–æ {need_credits}). –ü–æ–ø–æ–≤–Ω—ñ—Ç—å –±–∞–ª–∞–Ω—Å.",
                reply_markup=InlineKeyboardMarkup(rows)
            )

        try:
            limit = PREVIEW_COUNT if scope == "10" else CSV_MAX
            data_resp = await dfs.backlinks_live(domain, limit=limit, order_by="first_seen,desc")
            items = _extract_items(data_resp)
            if not items:
                bal_now = get_balance(uid)
                return await query.edit_message_text(f"–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π—à–æ–≤ üòï\n–í–∞—à –Ω–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {bal_now} –∫—Ä–µ–¥–∏—Ç—ñ–≤")

            if cmd == "show":
                cap = PREVIEW_COUNT if scope == "10" else min(50, len(items))
                txt = _fmt_preview(items, cap)
                bal_now = get_balance(uid)
                if scope == "all" and len(items) > cap:
                    txt += f"\n\n‚Ä¶–ø–æ–∫–∞–∑–∞–Ω–æ –ø–µ—Ä—à—ñ {cap} –∑ {len(items)}."
                txt += f"\n\nüí∞ –°–ø–∏—Å–∞–Ω–æ {need_credits} –∫—Ä–µ–¥–∏—Ç(–∏). –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {bal_now}"
                await query.edit_message_text(txt)
            else:  # csv
                csv_bytes = _items_to_csv_bytes(items)
                bal_now = get_balance(uid)
                await query.message.reply_document(
                    document=InputFile(io.BytesIO(csv_bytes), filename=f"{domain}_backlinks_{scope}.csv"),
                    caption=f"–ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è {domain} ({'10' if scope=='10' else 'all'})\nüí∞ –°–ø–∏—Å–∞–Ω–æ {need_credits}. –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {bal_now}"
                )
                await query.edit_message_text("–ì–æ—Ç–æ–≤–æ ‚úÖ")
        except HTTPError as e:
            log.exception("HTTP error")
            await query.edit_message_text(f"DataForSEO HTTP error: {e}")
        except Exception as e:
            log.exception("Unexpected error")
            await query.edit_message_text(f"–ü–æ–º–∏–ª–∫–∞: {e}")
        return

    # --- –í—Å–µ —ñ–Ω—à–µ (–∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ –∞–±–æ –Ω–µ–≤—ñ–¥–æ–º—ñ –∫–Ω–æ–ø–∫–∏) ---
    try:
        return await query.edit_message_text("–ö–Ω–æ–ø–∫–∞ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∞ –∞–±–æ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤—ñ—Ä–Ω–∏–π. –í—ñ–¥–∫—Ä–∏–π—Ç–µ –º–µ–Ω—é —â–µ —Ä–∞–∑: /topup")
    except Exception:
        return


# ====== –û–±—Ä–æ–±–∫–∞ –º–µ–Ω—é ======
async def on_menu_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()
    uid = update.effective_user.id

    if text == "üîó Backlinks":
        return await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É —É —Ñ–æ—Ä–º–∞—Ç—ñ: /backlinks yourdomain.com")
    if text == "üí≥ –ü–æ–ø–æ–≤–Ω–∏—Ç–∏":
        return await topup_providers(update, context)
    if text == "üìä –ë–∞–ª–∞–Ω—Å":
        return await balance(update, context)
    if text == "üì± –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è":
        if _registered(uid):
            return await update.message.reply_text("–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ ‚úÖ", reply_markup=main_menu_keyboard(True))
        return await register_cmd_or_menu(update, context)

# ====== –ê–î–ú–Ü–ù–ö–ê ======
def _db() -> sqlite3.Connection:
    return sqlite3.connect(DB_PATH)

def _admin_check(uid: int) -> bool:
    return uid in ADMIN_IDS

def _render_users_page(page: int) -> str:
    offset = (page - 1) * PAGE_SIZE
    with _db() as conn:
        cur = conn.execute("SELECT COUNT(*) FROM users")
        total = cur.fetchone()[0]
        cur = conn.execute(
            "SELECT user_id, balance, COALESCE(phone,'') FROM users ORDER BY user_id LIMIT ? OFFSET ?",
            (PAGE_SIZE, offset),
        )
        rows = cur.fetchall()

    if total == 0:
        return "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —â–µ –Ω–µ–º–∞—î."

    import math as _math
    lines = [f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ (–≤—Å—å–æ–≥–æ: {total}) | —Å—Ç–æ—Ä—ñ–Ω–∫–∞ {page}/{max(1, _math.ceil(total / PAGE_SIZE))}"]
    for uid, bal, phone in rows:
        phone_disp = phone if phone else "‚Äî"
        lines.append(f"‚Ä¢ {uid}: –±–∞–ª–∞–Ω—Å {bal}, —Ç–µ–ª–µ—Ñ–æ–Ω {phone_disp}")
    return "\n".join(lines)

def _admin_kb(page: int) -> InlineKeyboardMarkup:
    buttons = [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin|page|{page-1}")] if page > 1 else []
    buttons += [
        InlineKeyboardButton("‚Üª –û–Ω–æ–≤–∏—Ç–∏", callback_data=f"admin|page|{page}"),
        InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"admin|page|{page+1}")
    ]
    return InlineKeyboardMarkup([buttons])

async def admin_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if not _admin_check(uid):
        return await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
    text = _render_users_page(1)
    await update.message.reply_text(text, reply_markup=_admin_kb(1))

async def on_admin_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    uid = update.effective_user.id
    if not _admin_check(uid):
        return await query.edit_message_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
    parts = (query.data or "").split("|")
    if len(parts) == 3 and parts[0] == "admin" and parts[1] == "page":
        try:
            page = max(1, int(parts[2]))
        except Exception:
            page = 1
        text = _render_users_page(page)
        return await query.edit_message_text(text, reply_markup=_admin_kb(page))

# ====== MAIN ======
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("balance", balance))
    app.add_handler(CommandHandler("topup", topup_providers))  # /topup –≤—ñ–¥–∫—Ä–∏–≤–∞—î –≤–∏–±—ñ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    app.add_handler(CommandHandler("backlinks", backlinks))

    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è ‚Äî —Ä–æ–∑–º–æ–≤–∞
    reg_conv = ConversationHandler(
        entry_points=[
            CommandHandler("register", register_cmd_or_menu),
            MessageHandler(filters.Regex(r"^üì± –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è$"), register_cmd_or_menu),
        ],
        states={WAIT_PHONE: [MessageHandler(filters.CONTACT, on_contact_register)]},
        fallbacks=[CommandHandler("cancel", cancel_register)],
        allow_reentry=True,
    )
    app.add_handler(reg_conv)

    # –ê–¥–º—ñ–Ω–∫–∞
    app.add_handler(CommandHandler("admin", admin_cmd))
    app.add_handler(CallbackQueryHandler(on_admin_cb, pattern=r"^admin\|"))

    # Callback‚Äô–∏ (providers / amounts / topup / backlinks)
    app.add_handler(CallbackQueryHandler(on_choice))

    # –ú–µ–Ω—é-—Ç–µ–∫—Å—Ç–∏
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_menu_text))

    log.info("Bot started. DFS_BASE=%s BACKEND_BASE=%s PUBLIC_BASE=%s", DFS_BASE, BACKEND_BASE, PUBLIC_BASE)
    app.run_polling(close_loop=False)

if __name__ == "__main__":
    main()
