# bot.py
import os
import csv
import io
import math
import uuid
import logging

from dotenv import load_dotenv
from telegram import (
    Update, InputFile, InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    CallbackQueryHandler, MessageHandler, filters
)
from httpx import HTTPError, AsyncClient, ConnectError

from dataforseo import DataForSEO
from dao import init_db, ensure_user, get_balance, charge, get_phone, register_or_update_phone

logging.basicConfig(level=logging.INFO)
log = logging.getLogger(__name__)

# === ENV ===
load_dotenv()
TELEGRAM_TOKEN = os.environ["TELEGRAM_BOT_TOKEN"]

DFS_LOGIN = os.environ["DATAFORSEO_LOGIN"]
DFS_PASS = os.environ["DATAFORSEO_PASSWORD"]
DFS_BASE = os.getenv("DATAFORSEO_BASE", "https://api.dataforseo.com")

# –ø—É–±–ª—ñ—á–Ω–∏–π API (–Ω–∞—à FastAPI –ø—ñ–¥ LiqPay —ñ–Ω–≤–æ–π—Å–∏)
BACKEND_BASE = os.getenv("BACKEND_BASE", "http://127.0.0.1:8001").rstrip("/")

# —Ü—ñ–Ω–∞ –∫—Ä–µ–¥–∏—Ç—É —Ç–∞ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞ —Ü—ñ–Ω–∞ –∑–∞ –∑–∞–ø–∏—Ç –±–µ–∫–ª—ñ–Ω–∫—ñ–≤
CREDIT_PRICE_UAH = float(os.getenv("CREDIT_PRICE_UAH", "5"))          # –≥—Ä–Ω –∑–∞ 1 –∫—Ä–µ–¥–∏—Ç
CHARGE_BACKLINKS_UAH = float(os.getenv("CHARGE_BACKLINKS_UAH", "5"))  # —Å–ø–∏—Å–∞–Ω–Ω—è –≤ –≥—Ä–Ω –∑–∞ –±—É–¥—å-—è–∫–∏–π –∑–∞–ø–∏—Ç
CHARGE_BACKLINKS_CREDITS = max(1, math.ceil(CHARGE_BACKLINKS_UAH / CREDIT_PRICE_UAH))

# –æ–ø—Ü—ñ—ó –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è (–∫–Ω–æ–ø–∫–∏)
TOPUP_OPTIONS = [int(x.strip()) for x in os.getenv("TOPUP_OPTIONS", "100,250,500").split(",") if x.strip().isdigit()]

# === INIT ===
init_db()
dfs = DataForSEO(DFS_LOGIN, DFS_PASS, DFS_BASE)

# === HELPERS ===
def _extract_items(resp: dict) -> list[dict]:
    tasks = resp.get("tasks") or []
    if not tasks:
        return []
    t = tasks[0] or {}
    if t.get("status_code") and t["status_code"] != 20000:
        raise RuntimeError(t.get("status_message") or f"Task error: {t.get('status_code')}")
    res = t.get("result") or []
    if not res:
        return []
    return res[0].get("items") or []

def _fmt_preview(items: list[dict], cap: int) -> str:
    lines = []
    for it in items[:cap]:
        url_from = (it.get("page_from") or {}).get("url_from") or it.get("url_from")
        anchor = (it.get("anchor") or "").strip()
        first_seen = it.get("first_seen")
        lines.append(f"‚Ä¢ {url_from}\n  anchor: {anchor[:80]} | first_seen: {first_seen}")
    return "\n".join(lines)

def _items_to_csv_bytes(items: list[dict]) -> bytes:
    buf = io.StringIO()
    writer = csv.writer(buf)
    writer.writerow(["url_from", "url_to", "anchor", "dofollow", "first_seen", "last_seen", "domain_from"])
    for it in items:
        writer.writerow([
            (it.get("page_from") or {}).get("url_from") or it.get("url_from"),
            it.get("url_to"),
            (it.get("anchor") or "").replace("\n", " ").strip(),
            it.get("dofollow"),
            it.get("first_seen"),
            it.get("last_visited"),
            it.get("domain_from")
        ])
    return buf.getvalue().encode()

def _main_menu_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        [
            ["üîé Backlinks", "üí≥ –ü–æ–ø–æ–≤–Ω–∏—Ç–∏"],
            ["üì± –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è", "üíº –ë–∞–ª–∞–Ω—Å"],
        ],
        resize_keyboard=True
    )

# === COMMANDS ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    ensure_user(uid)
    bal = get_balance(uid)
    phone = get_phone(uid)
    reg_line = "–°—Ç–∞—Ç—É—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: ‚úÖ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–æ–¥–∞–Ω–æ" if phone else "–°—Ç–∞—Ç—É—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: ‚ùå –Ω–µ–º–∞—î —Ç–µ–ª–µ—Ñ–æ–Ω—É (–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /register)"
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø SEO-–±–æ—Ç –∑ –±–∞–ª–∞–Ω—Å–æ–º.\n"
        "–ö–æ–º–∞–Ω–¥–∏:\n"
        "/register ‚Äî –¥–æ–¥–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (–Ω–æ–≤–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –±–æ–Ω—É—Å)\n"
        "/backlinks <–¥–æ–º–µ–Ω> ‚Äî –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –±–µ–∫–ª—ñ–Ω–∫—ñ–≤ (—Å–ø–∏—Å–∞–Ω–Ω—è ~"
        f"{CHARGE_BACKLINKS_CREDITS} –∫—Ä–µ–¥–∏—Ç/—ñ–≤ ‚âà {CHARGE_BACKLINKS_UAH:.0f} –≥—Ä–Ω)\n"
        "/balance ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –±–∞–ª–∞–Ω—Å\n"
        "/topup ‚Äî –ø–æ–ø–æ–≤–Ω–∏—Ç–∏ –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ LiqPay\n\n"
        f"{reg_line}\n–í–∞—à –±–∞–ª–∞–Ω—Å: {bal} –∫—Ä–µ–¥–∏—Ç—ñ–≤",
        reply_markup=_main_menu_kb()
    )

async def register(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    ensure_user(uid)
    kb = [[KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]]
    await update.message.reply_text(
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É, —â–æ–± –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è –≤–ª–∞—Å–Ω–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É:",
        reply_markup=ReplyKeyboardMarkup(kb, one_time_keyboard=True, resize_keyboard=True)
    )

async def on_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    contact = update.message.contact
    if not contact:
        return
    if contact.user_id and contact.user_id != uid:
        return await update.message.reply_text(
            "–ó–¥–∞—î—Ç—å—Å—è, —Ü–µ –Ω–µ –≤–∞—à –Ω–æ–º–µ—Ä. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–∞–º–µ —Å–≤–æ—ó–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.",
            reply_markup=ReplyKeyboardRemove()
        )
    is_new, credited = register_or_update_phone(uid, contact.phone_number, initial_bonus=int(os.getenv("INITIAL_BONUS", "10")))
    bal = get_balance(uid)
    if is_new and credited > 0:
        txt = f"‚úÖ –î—è–∫—É—î–º–æ –∑–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é! –ù–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ –±–æ–Ω—É—Å: +{credited} –∫—Ä–µ–¥–∏—Ç—ñ–≤.\n–í–∞—à –±–∞–ª–∞–Ω—Å: {bal}"
    else:
        txt = f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –í–∞—à –±–∞–ª–∞–Ω—Å: {bal}"
    await update.message.reply_text(txt, reply_markup=_main_menu_kb())

async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    ensure_user(uid)
    bal = get_balance(uid)
    phone = get_phone(uid)
    reg_line = "‚úÖ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–æ–¥–∞–Ω–æ" if phone else "‚ùå –Ω–µ–º–∞—î —Ç–µ–ª–µ—Ñ–æ–Ω—É (–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /register)"
    await update.message.reply_text(f"–ë–∞–ª–∞–Ω—Å: {bal} –∫—Ä–µ–¥–∏—Ç—ñ–≤\n–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: {reg_line}", reply_markup=_main_menu_kb())

async def topup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    ensure_user(uid)
    rows = []
    for amount in TOPUP_OPTIONS:
        credits = int(amount // CREDIT_PRICE_UAH)
        rows.append([InlineKeyboardButton(f"–ü–æ–ø–æ–≤–Ω–∏—Ç–∏ {amount}‚Ç¥ (~{credits} –∫—Ä–µ–¥–∏—Ç—ñ–≤)", callback_data=f"topup|{amount}")])
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Å—É–º—É –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è:", reply_markup=InlineKeyboardMarkup(rows))

async def backlinks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –∫–Ω–æ–ø–∫–∏ "üîé Backlinks" ‚Äî –ø–æ–ø—Ä–æ—Å–∏–º–æ –≤–≤–µ—Å—Ç–∏ –¥–æ–º–µ–Ω
    if update.message.text.strip().lower() in ("üîé backlinks", "backlinks"):
        return await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å: /backlinks yourdomain.com")

    args = update.message.text.split()[1:]
    if not args:
        return await update.message.reply_text("–ü—Ä–∏–∫–ª–∞–¥: /backlinks yourdomain.com")
    domain = args[0]
    kb = [
        [
            InlineKeyboardButton("üëÄ –ü–æ–∫–∞–∑–∞—Ç–∏ 10 –æ—Å—Ç–∞–Ω–Ω—ñ—Ö", callback_data=f"show|{domain}|10"),
            InlineKeyboardButton("‚¨áÔ∏è CSV (10)", callback_data=f"csv|{domain}|10"),
        ],
        [
            InlineKeyboardButton("üëÄ –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ", callback_data=f"show|{domain}|all"),
            InlineKeyboardButton("‚¨áÔ∏è CSV (–≤—Å—ñ)", callback_data=f"csv|{domain}|all"),
        ],
    ]
    await update.message.reply_text(
        f"–î–æ–º–µ–Ω: {domain}\n"
        f"–ö–æ–∂–Ω–∞ –¥—ñ—è —Å–ø–∏—Å—É—î ~{CHARGE_BACKLINKS_CREDITS} –∫—Ä–µ–¥–∏—Ç/—ñ–≤ (‚âà {CHARGE_BACKLINKS_UAH:.0f} –≥—Ä–Ω). –û–±–µ—Ä—ñ—Ç—å:",
        reply_markup=InlineKeyboardMarkup(kb),
    )

# === CALLBACKS ===
async def on_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    uid = update.effective_user.id
    data = query.data.split("|")

    # –ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è
    if data[0] == "topup":
        amount_uah = int(data[1])
        try:
            async with AsyncClient(timeout=20) as c:
                r = await c.post(
                    f"{BACKEND_BASE}/api/payments/create",
                    json={"user_id": uid, "amount_uah": amount_uah}
                )
                r.raise_for_status()
                resp = r.json()
        except ConnectError:
            return await query.edit_message_text(
                "‚ùå –ë–µ–∫–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –ü–µ—Ä–µ–≤—ñ—Ä BACKEND_BASE —ñ —á–∏ –∑–∞–ø—É—â–µ–Ω–∏–π payments_api (–ø–æ—Ä—Ç 8001)."
            )
        except Exception as e:
            log.exception("Create invoice error")
            return await query.edit_message_text(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É: {e}")

        url = resp["invoiceUrl"]
        kb = [[InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏ (LiqPay)", url=url)]]
        return await query.edit_message_text(
            f"–†–∞—Ö—É–Ω–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ –Ω–∞ {amount_uah}‚Ç¥. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å, —â–æ–± –æ–ø–ª–∞—Ç–∏—Ç–∏:",
            reply_markup=InlineKeyboardMarkup(kb)
        )

    # ==== –°–ø–∏—Å–∞–Ω–Ω—è –∑–∞ –∑–∞–ø–∏—Ç –±–µ–∫–ª—ñ–Ω–∫—ñ–≤ (—Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞ —Ü—ñ–Ω–∞) ====
    try:
        action, domain, scope = data
    except ValueError:
        return await query.edit_message_text("–ù–µ–≤—ñ—Ä–Ω–∏–π –∑–∞–ø–∏—Ç.")

    cost = CHARGE_BACKLINKS_CREDITS  # –æ–¥–Ω–∞–∫–æ–≤–∞ —Ü—ñ–Ω–∞ –¥–ª—è show/csv —Ç–∞ 10/all

    if not charge(uid, cost, domain, f"{action}:{scope}"):
        rows = []
        for amount in TOPUP_OPTIONS:
            credits = int(amount // CREDIT_PRICE_UAH)
            rows.append([InlineKeyboardButton(
                f"üí≥ –ü–æ–ø–æ–≤–Ω–∏—Ç–∏ {amount}‚Ç¥ (~{credits} –∫—Ä–µ–¥–∏—Ç—ñ–≤)",
                callback_data=f"topup|{amount}"
            )])
        return await query.edit_message_text(
            f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫—Ä–µ–¥–∏—Ç—ñ–≤ (–ø–æ—Ç—Ä—ñ–±–Ω–æ {cost}). –ü–æ–ø–æ–≤–Ω—ñ—Ç—å –±–∞–ª–∞–Ω—Å.",
            reply_markup=InlineKeyboardMarkup(rows)
        )

    # ==== DataForSEO ====
    limit = 10 if scope == "10" else 1000
    try:
        data = await dfs.backlinks_live(domain, limit=limit, order_by="first_seen,desc")
        items = _extract_items(data)
        if not items:
            # –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –ø—É—Å—Ç–æ ‚Äî –º–∏ –≤–∂–µ —Å–ø–∏—Å–∞–ª–∏, —Ç–æ–º—É –ø–æ–∫–∞–∂–µ–º–æ –Ω–æ–≤–∏–π –±–∞–ª–∞–Ω—Å
            new_bal = get_balance(uid)
            await query.edit_message_text("–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π—à–æ–≤ üòï")
            return await query.message.reply_text(f"–í–∞—à –Ω–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {new_bal} –∫—Ä–µ–¥–∏—Ç—ñ–≤")

        if action == "show":
            cap = 10 if scope == "10" else 50
            txt = _fmt_preview(items, cap)
            if scope == "all" and len(items) > cap:
                txt += f"\n\n‚Ä¶–ø–æ–∫–∞–∑–∞–Ω–æ –ø–µ—Ä—à—ñ {cap} –∑ {len(items)}. –û–±–µ—Ä—ñ—Ç—å CSV (–≤—Å—ñ), —â–æ–± –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–æ–≤–Ω–∏–π —Å–ø–∏—Å–æ–∫."
            await query.edit_message_text(txt)

            # –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–∏–π –±–∞–ª–∞–Ω—Å
            new_bal = get_balance(uid)
            await query.message.reply_text(f"‚úÖ –û–ø–µ—Ä–∞—Ü—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–∞. –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {new_bal} –∫—Ä–µ–¥–∏—Ç—ñ–≤")

        elif action == "csv":
            csv_bytes = _items_to_csv_bytes(items)
            await query.message.reply_document(
                document=InputFile(io.BytesIO(csv_bytes), filename=f"{domain}_backlinks_{scope}.csv"),
                caption=f"–ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è {domain} ({'10' if scope=='10' else 'all'})"
            )
            # –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–∏–π –±–∞–ª–∞–Ω—Å
            new_bal = get_balance(uid)
            await query.message.reply_text(f"‚úÖ –§–∞–π–ª –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ. –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {new_bal} –∫—Ä–µ–¥–∏—Ç—ñ–≤")
        else:
            await query.edit_message_text("–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è.")
            # –≤—Å–µ –æ–¥–Ω–æ –ø–æ–≤—ñ–¥–æ–º–∏–º–æ –±–∞–ª–∞–Ω—Å, –±–æ –≤–∂–µ —Å–ø–∏—Å–∞–ª–∏
            new_bal = get_balance(uid)
            await query.message.reply_text(f"–ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {new_bal} –∫—Ä–µ–¥–∏—Ç—ñ–≤")

    except HTTPError as e:
        log.exception("HTTP error")
        await query.edit_message_text(f"DataForSEO HTTP error: {e}")
        new_bal = get_balance(uid)
        await query.message.reply_text(f"–ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {new_bal} –∫—Ä–µ–¥–∏—Ç—ñ–≤")
    except Exception as e:
        log.exception("Unexpected error")
        await query.edit_message_text(f"–ü–æ–º–∏–ª–∫–∞: {e}")
        new_bal = get_balance(uid)
        await query.message.reply_text(f"–ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {new_bal} –∫—Ä–µ–¥–∏—Ç—ñ–≤")

# === DISPATCH ===
async def _on_text_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é –∑ –Ω–∏–∂–Ω—å–æ—ó –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏."""
    txt = (update.message.text or "").strip().lower()
    if txt in ("üíº –±–∞–ª–∞–Ω—Å", "–±–∞–ª–∞–Ω—Å", "/balance"):
        return await balance(update, context)
    if txt in ("üì± —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è", "—Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è", "/register"):
        return await register(update, context)
    if txt in ("üí≥ –ø–æ–ø–æ–≤–Ω–∏—Ç–∏", "–ø–æ–ø–æ–≤–Ω–∏—Ç–∏", "/topup"):
        return await topup(update, context)
    if txt in ("üîé backlinks", "backlinks", "/backlinks"):
        return await backlinks(update, context)

def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("register", register))
    app.add_handler(MessageHandler(filters.CONTACT, on_contact))
    app.add_handler(CommandHandler("balance", balance))
    app.add_handler(CommandHandler("topup", topup))
    app.add_handler(CommandHandler("backlinks", backlinks))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, _on_text_menu))
    app.add_handler(CallbackQueryHandler(on_choice))

    log.info(
        "Bot started. DFS_BASE=%s BACKEND_BASE=%s CREDIT_PRICE_UAH=%.2f CHARGE_BACKLINKS_UAH=%.2f (=%d credits)",
        DFS_BASE, BACKEND_BASE, CREDIT_PRICE_UAH, CHARGE_BACKLINKS_UAH, CHARGE_BACKLINKS_CREDITS
    )
    app.run_polling(close_loop=False)

if __name__ == "__main__":
    main()
